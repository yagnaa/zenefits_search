{"version":3,"sources":["../src/lineBreaker.js"],"names":[],"mappings":"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","file":"lineBreaker.js","sourcesContent":["\nimport ObjectAssign from 'object-assign';\n\nconst INDENT_SIZE = 2;\n\nconst defaultOptions = {\n    allowForceLastLineBreak: true\n};\n\nfunction breakAt(pen, maxWidth) {\n\n    const pens =  [];\n    const breaker = {\n        add(callback) {\n            const thisPen = pen.clone();\n            const entry = {\n                pen: thisPen,\n                forceLineBreakBefore: false,\n                forceLineBreak: false,\n                indentOnBreak: false,\n                outdentOnBreak: false,\n                wrapIfHadBreaks: false,\n                newLineIfMultiLine: false\n            };\n\n            thisPen.forceLineBreak = function () {\n                entry.forceLineBreak = true;\n                return this;\n            };\n\n            thisPen.indentOnBreak = function () {\n                entry.indentOnBreak = true;\n                return this;\n            };\n\n            thisPen.outdentOnBreak = function () {\n                entry.outdentOnBreak = true;\n                return this;\n            };\n\n            thisPen.wrapIfHadBreaks = function () {\n                entry.wrapIfHadBreaks = true;\n                return this;\n            };\n\n            thisPen.forceLineBreakBefore = function () {\n                entry.forceLineBreakBefore = true;\n                return this;\n            };\n\n            thisPen.newLineIfMultiLine = function () {\n                entry.newLineIfMultiLine = true;\n                return this;\n            };\n\n            callback(thisPen);\n\n            pens.push(entry);\n            return this;\n        },\n\n        getOutput(options) {\n\n            options = ObjectAssign({}, defaultOptions, options);\n            const resultPen = pen.clone();\n            let width = 0;\n            let hadLineBreaks = false;\n            let indentCount = 0;\n\n            if (options && options.groupContent) {\n\n                let needIndent = false;\n                let isMultiLine = false;\n\n\n                isMultiLine = pens.some(entry => {\n\n                    const size = entry.pen.size();\n                    width += size.width;\n                    return entry.forceLineBreak || entry.forceLineBreakBefore ||\n                            size.height > 1 || width > maxWidth;\n                });\n                width = 0;\n\n                pens.forEach(entry => {\n\n                    if (entry.outdentOnBreak) {\n                        resultPen.outdentLines();\n                        indentCount--;\n                    }\n\n                    const size = entry.pen.size();\n\n                    if (width + size.width > maxWidth || entry.forceLineBreakBefore) {\n                        width = 0;\n                        resultPen.nl();\n                        needIndent = true;\n                        hadLineBreaks = true; // TODO: Need linebreaker test for this line here\n                    }\n                    width += size.width;\n\n                    if (needIndent) {\n                        width += INDENT_SIZE;\n                        resultPen.i();\n                        needIndent = false;\n                    }\n                    resultPen.append(entry.pen);\n\n                    if (entry.indentOnBreak) {\n                        resultPen.indentLines();\n                        indentCount++;\n                    }\n\n                    if ((entry.wrapIfHadBreaks && hadLineBreaks) ||\n                        entry.forceLineBreak || (isMultiLine && entry.newLineIfMultiLine)) {\n                        resultPen.nl();\n                        needIndent = true;\n                        hadLineBreaks = true;\n                        width = 0;\n                    }\n\n                });\n\n\n            } else {\n\n                const isMultiline = pens.some(entry => {\n                    if (entry.forceLineBreak || entry.forceLineBreakBefore) {\n                        hadLineBreaks = true;\n                        return true;\n                    }\n                    const size = entry.pen.size();\n                    width += size.width;\n                    return (width > maxWidth || size.height > 1);\n                });\n\n                if (isMultiline) {\n                    let previousLineBreak = false;\n                    pens.forEach((entry, index) => {\n                        if (entry.outdentOnBreak) {\n                            resultPen.outdentLines();\n                            indentCount--;\n                        }\n                        const addBreak = (index < pens.length - 1) || (options.allowForceLastLineBreak && entry.forceLineBreak);\n                        if (addBreak) {\n                            hadLineBreaks = true;\n                        }\n\n                        resultPen.i().append(entry.pen).nl(addBreak ? 1 : 0);\n                        if (entry.indentOnBreak) {\n                            resultPen.indentLines();\n                            indentCount++;\n                        }\n                        previousLineBreak = addBreak;\n                    });\n                } else {\n                    pens.forEach(entry => {\n                        resultPen.append(entry.pen);\n                    });\n\n                }\n            }\n\n            for (;indentCount > 0; --indentCount) {\n                resultPen.outdentLines();\n            }\n\n            if (hadLineBreaks && options && options.appendBreakIfHadBreaks) {\n                // Don't force a line break if there have been no outputs,\n                // or the last line was a forced line break\n                if (pens.length && !pens[pens.length - 1].forceLineBreak) {\n                    resultPen.nl().i();\n                }\n            }\n\n            return {\n                output: resultPen,\n                breakAfter: pens.length && pens[pens.length - 1].forceLineBreak,\n                breakBefore: pens.length && pens[0].forceLineBreakBefore\n            };\n        }\n\n    };\n    return breaker;\n}\n\nexport default {\n    breakAt\n};"]}
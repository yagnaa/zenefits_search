{"version":3,"sources":["../src/syncContains.js"],"names":[],"mappings":"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","file":"syncContains.js","sourcesContent":["import Diff from './diff';\nimport isNativeType from './isNativeType';\nimport RequiresAsyncError from './requiresAsyncError';\n\nfunction contains(actualAdapter, expectedAdapter, actual, expected, equal, options) {\n\n    const containsResult = containsContent(actualAdapter, expectedAdapter, actual, expected, equal, options);\n\n            // If result has WRAPPERELEMENTs around it, remove them\n    stripWrapperElements(actualAdapter, containsResult);\n    return containsResult;\n}\n\nfunction stripWrapperElements(actualAdapter, containsResult) {\n\n    if (containsResult.bestMatch && containsResult.bestMatch.diff.type === 'WRAPPERELEMENT') {\n        // Unwrap the diff and the item\n        containsResult.bestMatch.diff = containsResult.bestMatch.diff.children[0];\n        containsResult.bestMatchItem = actualAdapter.getChildren(containsResult.bestMatchItem)[0];\n        return stripWrapperElements(actualAdapter, containsResult);\n    }\n    return containsResult;\n}\n\n\nfunction containsContent(actualAdapter, expectedAdapter, actual, expected, equal, options) {\n\n    let result = {\n        found: false,\n        bestMatch: null,\n        bestMatchItem: null\n    };\n\n    const diffResult = Diff.diffElements(actualAdapter, expectedAdapter, actual, expected, equal, options);\n\n\n    if (diffResult && typeof diffResult.then === 'function') {\n        throw new RequiresAsyncError();\n    }\n\n\n    if (diffResult.weight === Diff.DefaultWeights.OK) {\n        result.found = true;\n        result.bestMatch = diffResult;\n        result.bestMatchItem = actual;\n        return result;\n    }\n    result.bestMatch = diffResult;\n    result.bestMatchItem = actual;\n\n    if (!isNativeType(actual)) {\n        const children = actualAdapter.getChildren(actual);\n        if (children) {\n\n            const childrenLength = children.length;\n\n            for(let childIndex = 0; childIndex < childrenLength; ++childIndex) {\n\n                const childResult = containsContent(actualAdapter, expectedAdapter, children[childIndex], expected, equal, options);\n\n                if (childResult.found) {\n                    return {\n                        found: true,\n                        bestMatch: childResult.bestMatch,\n                        bestMatchItem: childResult.bestMatchItem\n                    };\n                }\n\n                if (!result.bestMatch || childResult.bestMatch.weight < result.bestMatch.weight) {\n                    result.bestMatch = childResult.bestMatch;\n                    result.bestMatchItem = childResult.bestMatchItem;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\nexport default contains;\n"]}
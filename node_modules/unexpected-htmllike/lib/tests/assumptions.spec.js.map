{"version":3,"sources":["../../src/tests/assumptions.spec.js"],"names":[],"mappings":";;;;4BACyB,eAAe;;;;iCACV,qBAAqB;;;;0BAC5B,YAAY;;;;AAEnC,IAAM,MAAM,GAAG,wBAAW,KAAK,EAAE,CAAC;;AAElC,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,CAAa,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE;AACxD,WAAO,MAAM,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,4CAAkB,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,OAAO,EAAE;AACvD,mBAAO,CAAC,OAAO,CAAC,CAAC;SACpB,CAAC,CAAC;KACN,CAAC,CAAC;CACN,CAAA;;AAED,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,YAAM;AACjC,YAAQ,CAAC,OAAO,EAAE,YAAM;;AAExB,UAAE,CAAC,sDAAsD,EAAE,YAAM;AAC7D,mBAAO,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,UAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAK;AAC9F,wBAAQ,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;aAC3B,EAAE,UAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ;uBAAK,QAAQ,CAAC,KAAK,CAAC;aAAA,CAAC,EAAE,gBAAgB,EAAE,YAAY,EAAE,EAExF,CAAC,CAAC;SACN,CAAC,CAAC;KACF,CAAC,CAAC;;AAEH,YAAQ,CAAC,MAAM,EAAE,YAAM;;AAEnB,UAAE,CAAC,sDAAsD,EAAE,YAAM;AAC7D,mBAAO,MAAM,CAAC,+BAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EACjD,UAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ;uBAAK,CAAC,GAAG,GAAG,KAAK,CAAC;aAAA,EACjD,UAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ;uBAAK,KAAK;aAAA,CAAC,EAC1C,YAAY,EAAE,EAEjB,CAAC,CAAC;SACN,CAAC,CAAC;KACN,CAAC,CAAC;CACN,CAAC,CAAA","file":"assumptions.spec.js","sourcesContent":["\nimport ArrayChanges from 'array-changes';\nimport ArrayChangesAsync from 'array-changes-async';\nimport Unexpected from 'unexpected';\n\nconst expect = Unexpected.clone();\n\nconst ArrayChangesPromise = function (a, b, equal, similar) {\n    return expect.promise((resolve, reject) => {\n        ArrayChangesAsync(a, b, equal, similar, function (changes) {\n            resolve(changes);\n        });\n    });\n}\n\ndescribe.skip('array-changes', () => {\n    describe('async', () => {\n\n    it('returns an insert and delete for non-similar entries', () => {\n        return expect(ArrayChangesPromise([1, 2, 3], [100, 300, 500], (a, b, aIndex, bIndex, callback) => {\n            callback(a * 100 === b);\n        }, (a, b, aIndex, bIndex, callback) => callback(false)), 'when fulfilled', 'to satisfy', [\n\n        ]);\n    });\n    });\n\n    describe('sync', () => {\n\n        it('returns an insert and delete for non-similar entries', () => {\n            return expect(ArrayChanges([1, 2, 3], [100, 200, 500],\n                (a, b, aIndex, bIndex, callback) => a * 100 === b,\n                (a, b, aIndex, bIndex, callback) => false),\n                'to satisfy', [\n\n            ]);\n        });\n    });\n})"]}
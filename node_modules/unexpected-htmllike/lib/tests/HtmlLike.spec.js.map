{"version":3,"sources":["../../src/tests/HtmlLike.spec.js"],"names":[],"mappings":"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","file":"HtmlLike.spec.js","sourcesContent":["\n/* These are the integration tests for unexpected-htmllike\n * They confirm that diff, contains and painter work together correctly\n */\n\nimport HtmlLikeUnexpected from '../index';\nimport MagicPen from 'magicpen';\nimport MagicPenPrism from 'magicpen-prism';\nimport Unexpected from 'unexpected';\nimport ObjectAssign from 'object-assign';\nimport Diff from '../diff';\nimport MockExtensions from './mock-extensions';\n\nimport {\n    expectedSymbol,\n    actualSymbol,\n    TestExpectedAdapter,\n    TestActualAdapter,\n    createActual,\n    createExpected\n} from './mockEntities';\n\nconst expect = Unexpected.clone()\n    .use(MockExtensions);\n\n\nexpect.output.preferredWidth = 80;\n\n\nconst prismPen = MagicPen();\nprismPen.use(MagicPenPrism);\n\ndescribe('HtmlLikeComponent', () => {\n\n\n    it('outputs a formatted output with no children', () => {\n        expect(\n            createActual({ name: 'div', attribs: { id: 'foo', className: 'bar' }, children: [] }),\n            'to inspect as',\n            '<div id=\"foo\" className=\"bar\" />'\n        );\n\n    });\n\n    it('outputs a formatted output with children', () => {\n\n        expect(createActual({\n            name: 'div', attribs: { id: 'foo', className: 'bar' }, children: [\n                {\n                    name: 'span',\n                    attribs: { className: 'child1' },\n                    children: ['child content 1']\n                },\n                {\n                    name: 'span',\n                    attribs: { className: 'child2' },\n                    children: ['child content 2']\n                }\n            ]\n        }), 'to inspect as',\n            '<div id=\"foo\" className=\"bar\">\\n' +\n            '  <span className=\"child1\">child content 1</span>\\n' +\n            '  <span className=\"child2\">child content 2</span>\\n' +\n            '</div>');\n    });\n\n    it('outputs object attributes', () => {\n        expect(createActual({\n                name: 'div', attribs: { style: { width: 125, height: 100 } }, children: [\n                ]\n            }), 'to inspect as', '<div style={{ width: 125, height: 100 }} />');\n\n    });\n\n    /* TODO: Reenable this test when inspect uses the painter\n    it('outputs large object attributes over multiple lines', () => {\n        expect({\n                name: 'div',\n                attribs: {\n                    style: {\n                        width: 125,\n                        height: 100,\n                        background: '#ff6600 url(\"blah blah blah blah blah\")'\n                    }\n                }, children: []\n            }, 'to inspect as',\n            '<div style={{ width: 125, height: 100 }} />');\n\n    });\n    */\n\n    it('outputs deeply nested children over multiple lines', () => {\n\n        expect(createActual({\n                name: 'div', attribs: { id: 'outside-wrapper', className: 'wrap-me' }, children: [\n                    {\n                        name: 'div', attribs: { id: 'foo', className: 'bar' }, children: [\n                        {\n                            name: 'span',\n                            attribs: { className: 'child1' },\n                            children: ['child content 1']\n                        },\n                        {\n                            name: 'span',\n                            attribs: { className: 'child2' },\n                            children: ['child content 2']\n                        }\n                    ]\n                    }\n                ]\n    }), 'to inspect as',\n            '<div id=\"outside-wrapper\" className=\"wrap-me\">\\n' +\n            '  <div id=\"foo\" className=\"bar\">\\n' +\n            '    <span className=\"child1\">child content 1</span>\\n' +\n            '    <span className=\"child2\">child content 2</span>\\n' +\n            '  </div>\\n' +\n            '</div>');\n\n    });\n\n    it('outputs children on a single line if it fits', () => {\n\n        expect(createActual({\n            name: 'div', attribs: { id: 'foo', className: 'bar' }, children: [\n                {\n                    name: 'span',\n                    children: ['1']\n                },\n                {\n                    name: 'span',\n                    children: ['2']\n                }\n            ]\n        }), 'to inspect as', '<div id=\"foo\" className=\"bar\"><span>1</span><span>2</span></div>');\n    });\n\n    it('outputs attributes on split lines if they are too long, with no content', () => {\n        expect(createActual({\n            name: 'div', attribs: {\n                id: 'foo',\n                className: 'bar blah mcgar',\n                'data-role': 'special-long-button',\n                'data-special': 'some other long attrib'\n            },\n            children: []\n        }), 'to inspect as',\n            '<div id=\"foo\" className=\"bar blah mcgar\" data-role=\"special-long-button\"\\n' +\n            '   data-special=\"some other long attrib\"\\n' +\n            '/>');\n    });\n\n    it('outputs attributes on split lines if they are too long, with content', () => {\n        expect(createActual({\n            name: 'div', attribs: {\n                id: 'foo',\n                className: 'bar blah mcgar',\n                'data-role': 'special-long-button',\n                'data-special': 'some other long attrib'\n            },\n            children: ['some content']\n        }), 'to inspect as',\n            '<div id=\"foo\" className=\"bar blah mcgar\" data-role=\"special-long-button\"\\n' +\n            '   data-special=\"some other long attrib\">\\n' +\n            '  some content\\n' +\n            '</div>');\n    });\n\n\n    describe('diff', () => {\n\n       it('gets the weight correct for a single component with a different attribute', () => {\n\n           return expect(createActual({\n               name: 'div', attribs: { id: 'foo' }, children: []\n           }), 'when diffed as html against', createExpected({\n               name: 'div', attribs: { id: 'bar' }, children: []\n           }), 'to have weight', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH);\n\n       });\n\n        it('outputs the diff of a single component with a different attribute', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: []\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'bar' }, children: []\n            }), 'to output',\n            \"<div id=\\\"foo\\\" // expected 'foo' to equal 'bar'\\n\" +\n            '              //\\n' +\n            '              // -foo\\n' +\n            '              // +bar\\n' +\n            '/>');\n\n        });\n\n        it('outputs attributes that are different types but evaluate to the same string', () => {\n            return expect(createActual({\n                name: 'div', attribs: { id: '42' }, children: []\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 42 }, children: []\n            }), 'to output with weight', '<div id=\"42\" // expected \\'42\\' to equal 42\\n' +\n            '/>', Diff.DefaultWeights.ATTRIBUTE_MISMATCH);\n\n        });\n\n        it('outputs the diff of a single component with a different attribute and a matching attribute after', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo', className: 'testing' }, children: []\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'bar', className: 'testing' }, children: []\n            }), 'to output', '<div id=\"foo\" // expected \\'foo\\' to equal \\'bar\\'\\n' +\n            '              //\\n' +\n            '              // -foo\\n' +\n            '              // +bar\\n' +\n            '   className=\"testing\"\\n' +\n            '/>');\n        });\n\n        it('outputs the diff of a single component with a different attribute and a matching attribute before', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { className: 'testing', id: 'foo'  }, children: []\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { className: 'testing', id: 'bar' }, children: []\n            }), 'to output', '<div className=\"testing\" id=\"foo\" // expected \\'foo\\' to equal \\'bar\\'\\n' +\n            '                                  //\\n' +\n            '                                  // -foo\\n' +\n            '                                  // +bar\\n' +\n            '/>');\n        });\n\n        it('breaks the output if there are lots of matching attributes', () => {\n\n            const attribs = {\n                'data-attrib1': 'aaa',\n                'data-attrib2': 'hello world',\n                'data-attrib3': 'testing is fun',\n                'data-attrib4': 'hallo welt',\n                'data-attrib5': 'jonny number five'\n            };\n\n            const afterAttribs = {\n                'data-after': 'bbb',\n                'data-after2': 'ccc some more words',\n                'data-after3': 'here is some more'\n            };\n            const actualAttribs = ObjectAssign({}, attribs, { 'data-mismatch': 'foo' }, afterAttribs);\n            const expectedAttribs = ObjectAssign({}, attribs, { 'data-mismatch': 'bar' }, afterAttribs);\n\n            return expect(createActual({\n                name: 'div', attribs: actualAttribs, children: []\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: expectedAttribs, children: []\n            }), 'to output', '<div data-attrib1=\"aaa\" data-attrib2=\"hello world\" data-attrib3=\"testing is fun\"\\n' +\n            '   data-attrib4=\"hallo welt\" data-attrib5=\"jonny number five\"\\n' +\n            '   data-mismatch=\"foo\" // expected \\'foo\\' to equal \\'bar\\'\\n' +\n            '                       //\\n' +\n            '                       // -foo\\n' +\n            '                       // +bar\\n' +\n            '   data-after=\"bbb\" data-after2=\"ccc some more words\"\\n' +\n            '   data-after3=\"here is some more\"\\n' +\n            '/>');\n        });\n\n        it('highlights a missing attribute', () => {\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo'  }, children: []\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { className: 'testing', id: 'foo' }, children: []\n            }), 'to output', '<div id=\"foo\" // missing className=\"testing\"\\n' +\n            '/>');\n        });\n\n        it('highlights two missing attributes', () => {\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo'  }, children: []\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { className: 'testing', id: 'foo', extra: '123' }, children: []\n            }), 'to output', '<div id=\"foo\" // missing className=\"testing\"\\n' +\n            '   // missing extra=\"123\"\\n' +\n            '/>');\n        });\n\n        it('diffs a component with a single text child', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: ['abc']\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: ['def']\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  abc // -abc\\n' +\n            '      // +def\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH);\n        });\n\n        it('diffs a component with mismatching content types', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [ '42' ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [ 42 ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  42 // mismatched type -string\\n' +\n            '     //                 +number\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.CONTENT_TYPE_MISMATCH);\n        });\n\n        it('diffs a component with child components with different content', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: {}, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: {}, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['updated'] }\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <span>one</span>\\n' +\n            '  <span>\\n' +\n            '    two // -two\\n' +\n            '        // +updated\\n' +\n            '  </span>\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH);\n        });\n\n        it('diffs a component with child components with different tags', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'div', attribs: {}, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: {}, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <div // should be <span\\n' +\n            '  >\\n' +\n            '    one\\n' +\n            '  </div>\\n' +\n            '  <span>two</span>\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.NAME_MISMATCH);\n        });\n\n        it('diffs a component with child components with different attributes', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childbar' }, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <span id=\"childfoo\" // expected \\'childfoo\\' to equal \\'childbar\\'\\n' +\n            '                      //\\n' +\n            '                      // -childfoo\\n' +\n            '                      // +childbar\\n' +\n            '  >\\n' +\n            '    one\\n' +\n            '  </span>\\n' +\n            '  <span>two</span>\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH);\n        });\n\n        it('diffs a component with a missing child', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <span id=\"childfoo\">one</span>\\n' +\n            '  // missing <span>two</span>\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_MISSING);\n        });\n\n        it('diffs a component with an extra child', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <span id=\"childfoo\">one</span>\\n' +\n            '  <span>two</span> // should be removed\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_INSERTED);\n        });\n\n        it('diffs a component with a child that is an element and should be a string', () => {\n\n            // override the weight for NATIVE_NONNATIVE_MISMATCH, otherwise a wrapper is preferred\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'when diffed as html with options against', { weights: { NATIVE_NONNATIVE_MISMATCH: 1 } }, createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                'some text'\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <span id=\"childfoo\">one</span>\\n' +\n            \"  <span>two</span> // should be 'some text'\\n\" +\n            '</div>', // Overridden NATIVE_NONNATIVE_MISMATCH\n            1);\n        });\n\n        it('lays out a diff where element should be wrapped but it all fits on one line', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: {}, children: [\n                'two'\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: {}, children: [\n                { name: 'child', attribs: {}, children: ['aa' ] }\n            ]\n            }), 'to output with weight', '<div>\\n' +\n            '  two // should be <child>aa</child>\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.NATIVE_NONNATIVE_MISMATCH);\n\n        });\n\n        it('diffs a component with a child that is an deep element and should be a string', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: {}, children: [\n                    { name: 'span', attribs: { className: 'deep' }, children: ['nested and broken over many lines because it is very long'] }\n                ] }\n            ]\n            }), 'when diffed as html with options against', { weights: { NATIVE_NONNATIVE_MISMATCH: 1 } }, createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                'some text'\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <span id=\"childfoo\">one</span>\\n' +\n            \"  <span>                                                        // should be 'some text'\\n\" +\n            '    <span className=\"deep\">                                     //\\n' +\n            '      nested and broken over many lines because it is very long //\\n' +\n            '    </span>                                                     //\\n' +\n            '  </span>                                                       //\\n' +\n            '</div>', // Overridden weight to force a NATIVE_NONNATIVE_MISMATCH\n            1);\n        });\n\n        it('diffs a component with a child that is a string and should be an element', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                'some text'\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: {}, children: ['two'] }\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <span id=\"childfoo\">one</span>\\n' +\n            '  some text // should be <span>two</span>\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.NATIVE_NONNATIVE_MISMATCH);\n        });\n\n        it('diffs a component with a child that is a string and should be a deep multiline element', () => {\n\n            return expect(createActual({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                'some text'\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'div', attribs: { id: 'foo' }, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: {}, children: [\n                    { name: 'span', attribs: { className: 'deep' }, children: [\n                        'nested and broken over many lines because it is very long'\n                    ] }\n                ] }\n            ]\n            }), 'to output with weight', '<div id=\"foo\">\\n' +\n            '  <span id=\"childfoo\">one</span>\\n' +\n            '  some text // should be <span>\\n' +\n            '            //             <span className=\"deep\">\\n' +\n            '            //               nested and broken over many lines because it is very long\\n' +\n            '            //             </span>\\n' +\n            '            //           </span>\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.NATIVE_NONNATIVE_MISMATCH);\n        });\n\n        describe('with options', () => {\n\n            describe('diffExtraAttributes', () => {\n\n                it('accepts extra attributes when flag is false', () => {\n\n                    return expect(createActual({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo', extraAttribute: 'does not matter' }, children: ['one'] }\n                        ]\n                    }), 'when diffed as html with options against', { diffExtraAttributes: false }, createExpected({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                    }), 'to have weight', HtmlLikeUnexpected.DefaultWeights.OK);\n\n                });\n\n                it('diffs extra attributes when flag is true', () => {\n\n                    return expect(createActual({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo', 'data-extraAttribute': 'does matter' }, children: ['one'] }\n                        ]\n                    }), 'when diffed as html with options against', { diffExtraAttributes: true }, createExpected({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                    }), 'to output with weight', '<div id=\"foo\">\\n' +\n                    '  <span id=\"childfoo\"\\n' +\n                    '     data-extraAttribute=\"does matter\" // data-extraAttribute should be removed\\n' +\n                    '  >\\n' +\n                    '    one\\n' +\n                    '  </span>\\n' +\n                    '</div>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_EXTRA);\n\n                });\n            });\n\n            describe('diffRemovedAttributes', () => {\n\n                it('diffs removed attributes when flag is true', () => {\n\n                    return expect(createActual({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                    }), 'when diffed as html with options against', { diffRemovedAttributes: true }, createExpected({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo', removedAttribute: 'does matter' }, children: ['one'] }\n                        ]\n                    }), 'to output with weight', '<div id=\"foo\">\\n' +\n                    '  <span id=\"childfoo\" // missing removedAttribute=\"does matter\"\\n' +\n                    '  >\\n' +\n                    '    one\\n' +\n                    '  </span>\\n' +\n                    '</div>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISSING);\n                });\n\n                it('ignores removed attributes when flag is false', () => {\n\n                    return expect(createActual({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                    }), 'when diffed as html with options against', { diffRemovedAttributes: false }, createExpected({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo', 'data-removedAttribute': 'does matter' }, children: ['one'] }\n                        ]\n                    }), 'to output with weight', '<div id=\"foo\"><span id=\"childfoo\">one</span></div>', HtmlLikeUnexpected.DefaultWeights.OK);\n                });\n            });\n\n            describe('diffMissingChildren', () => {\n\n                it('diffs missing children when the flag is true', () => {\n\n                    return expect(createActual({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                    ]\n                    }), 'when diffed as html with options against', { diffMissingChildren: true }, createExpected({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'removed-child' }, children: ['two'] }\n                    ]\n                    }), 'to output with weight', '<div id=\"foo\">\\n' +\n                    '  <span id=\"childfoo\">one</span>\\n' +\n                    '  // missing <span id=\"removed-child\">two</span>\\n' +\n                    '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_MISSING);\n                });\n\n                it('ignores missing children when the flag is false', () => {\n\n                    return expect(createActual({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                    ]\n                    }), 'when diffed as html with options against', { diffMissingChildren: false }, createExpected({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'removed-child' }, children: ['two'] }\n                    ]\n                    }), 'to output with weight', '<div id=\"foo\"><span id=\"childfoo\">one</span></div>', HtmlLikeUnexpected.DefaultWeights.OK);\n                });\n            });\n\n            describe('diffExtraChildren', () => {\n\n                it('diffs extra children when the flag is true', () => {\n\n                    return expect(createActual({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'extra-child' }, children: ['two'] }\n                    ]\n                    }), 'when diffed as html with options against', { diffExtraChildren: true }, createExpected({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                    ]\n                    }), 'to output with weight', '<div id=\"foo\">\\n' +\n                    '  <span id=\"childfoo\">one</span>\\n' +\n                    '  <span id=\"extra-child\">two</span> // should be removed\\n' +\n                    '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_INSERTED);\n                });\n\n                it('ignores extra children when the flag is false', () => {\n\n                    return expect(createActual({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'extra-child' }, children: ['two'] }\n                    ]\n                    }), 'when diffed as html with options against', { diffExtraChildren: false }, createExpected({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                    ]\n                    }), 'to output with weight', '<div id=\"foo\"><span id=\"childfoo\">one</span><span id=\"extra-child\">two</span></div>', HtmlLikeUnexpected.DefaultWeights.OK);\n                });\n            });\n        });\n\n        describe('wrappers', () => {\n\n            it('identifies an extra wrapper component around a single child', () => {\n\n                    return expect(createActual({\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        {\n                            name: 'div', attribs: { id: 'wrapper' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                        }\n                    ]\n                }), 'when diffed as html against', createExpected({\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        {\n                            name: 'span', attribs: { id: 'childfoo' }, children: ['one']\n                        }\n                        ]\n                    }), 'to output with weight', '<body id=\"main\">\\n' +\n                    '  <div id=\"wrapper\"> // wrapper should be removed\\n' +\n                    '    <span id=\"childfoo\">one</span>\\n' +\n                    '  </div> // wrapper should be removed\\n' +\n                    '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED);\n            });\n\n            it('identifies an extra wrapper component around a many children', () => {\n\n                return expect(createActual({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    {\n                        name: 'div', attribs: { id: 'wrapper' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                    ]\n                    }\n                ]\n                }), 'when diffed as html against', createExpected({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n                }), 'to output with weight', '<body id=\"main\">\\n' +\n                '  <div id=\"wrapper\"> // wrapper should be removed\\n' +\n                '    <span id=\"childfoo\">one</span><span id=\"childfoo\">two</span>\\n' +\n                '  </div> // wrapper should be removed\\n' +\n                '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED);\n            });\n\n            it('identifies an extra wrapper component around a many children with some minor changes', () => {\n\n                return expect(createActual({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    {\n                        name: 'div', attribs: { id: 'wrapper' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                    ]\n                    }\n                ]\n                }), 'when diffed as html against', createExpected({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'other' }, children: ['changed'] }\n                ]\n                }), 'to output with weight', '<body id=\"main\">\\n' +\n                '  <div id=\"wrapper\"> // wrapper should be removed\\n' +\n                '    <span id=\"childfoo\">one</span>\\n' +\n                '    <span id=\"childfoo\" // expected \\'childfoo\\' to equal \\'other\\'\\n' +\n                '                        //\\n' +\n                '                        // -childfoo\\n' +\n                '                        // +other\\n' +\n                '    >\\n' +\n                '      two // -two\\n' +\n                '          // +changed\\n' +\n                '    </span>\\n' +\n                '  </div> // wrapper should be removed\\n' +\n                '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED +\n                HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH +\n                HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH);\n            });\n\n            it('identifies an extra wrapper component around each child', () => {\n\n                return expect(createActual({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                        { name: 'childWrapper', attribs: {}, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }] },\n                        { name: 'childWrapper', attribs: {}, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }] }\n                ]\n                }), 'when diffed as html against', createExpected({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n                }), 'to output with weight', '<body id=\"main\">\\n' +\n                '  <childWrapper> // wrapper should be removed\\n' +\n                '    <span id=\"childfoo\">one</span>\\n' +\n                '  </childWrapper> // wrapper should be removed\\n' +\n                '  <childWrapper> // wrapper should be removed\\n' +\n                '    <span id=\"childfoo\">two</span>\\n' +\n                '  </childWrapper> // wrapper should be removed\\n' +\n                '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED * 2);\n            });\n\n            it('identifies an extra wrapper component around each child with attributes', () => {\n\n                return expect(createActual({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    { name: 'childWrapper', attribs: { id: 'wrapper1' }, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }] },\n                    { name: 'childWrapper', attribs: { id: 'wrapper2' }, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }] }\n                ]\n                }), 'when diffed as html against', createExpected({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n                }), 'to output with weight', '<body id=\"main\">\\n' +\n                '  <childWrapper id=\"wrapper1\"> // wrapper should be removed\\n' +\n                '    <span id=\"childfoo\">one</span>\\n' +\n                '  </childWrapper> // wrapper should be removed\\n' +\n                '  <childWrapper id=\"wrapper2\"> // wrapper should be removed\\n' +\n                '    <span id=\"childfoo\">two</span>\\n' +\n                '  </childWrapper> // wrapper should be removed\\n' +\n                '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED * 2);\n            });\n\n            it('ignores wrappers when using the diffWrappers=false flag', () => {\n\n                return expect(createActual({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    { name: 'childWrapper', attribs: {}, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }] },\n                    { name: 'childWrapper', attribs: {}, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }] }\n                ]\n                }), 'when diffed as html with options against', { diffWrappers: false }, createExpected({\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n                }), 'to output with weight', '<body id=\"main\">\\n' +\n                '  <childWrapper>\\n' +\n                '    <span id=\"childfoo\">one</span>\\n' +\n                '  </childWrapper>\\n' +\n                '  <childWrapper>\\n' +\n                '    <span id=\"childfoo\">two</span>\\n' +\n                '  </childWrapper>\\n' +\n                '</body>', HtmlLikeUnexpected.DefaultWeights.OK);\n            });\n\n            // TODO: Skip 2 wrapper    MainComp -> wrapper1 -> wrapper2 -> expectedComp\n            // Skip wrapper on main element    MainCompWrapper -> expected\n\n            it('diffs a top level wrapper', () => {\n\n                return expect(createActual({\n                    name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                    {\n                        name: 'TopLevel', attribs: {}, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                    ]\n                    }\n                ]\n                }), 'when diffed as html against', createExpected({\n                        name: 'TopLevel', attribs: {}, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n                }), 'to output with weight', '<HigherOrderTopLevel id=\"main\"> // wrapper should be removed\\n' +\n                '  <TopLevel><span id=\"childfoo\">one</span><span id=\"childfoo\">two</span></TopLevel>\\n' +\n                '</HigherOrderTopLevel> // wrapper should be removed', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED);\n            });\n\n            it('diffs a two levels of top level wrapper', () => {\n\n                return expect(createActual({\n                    name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                    {\n                        name: 'TopLevel', attribs: {}, children: [\n                        { name: 'MidLevel', attribs: {}, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                        ] }\n                    ]\n                    }\n                ]\n                }), 'when diffed as html against', createExpected({\n                    name: 'MidLevel', attribs: {}, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n                }), 'to output with weight', '<HigherOrderTopLevel id=\"main\"> // wrapper should be removed\\n' +\n                '  <TopLevel> // wrapper should be removed\\n' +\n                '    <MidLevel><span id=\"childfoo\">one</span><span id=\"childfoo\">two</span></MidLevel>\\n' +\n                '  </TopLevel> // wrapper should be removed\\n' +\n                '</HigherOrderTopLevel> // wrapper should be removed', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED * 2);\n            });\n\n            it('ignores two levels of top level wrapper when diffWrappers is false', () => {\n\n                return expect(createActual({\n                    name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                    {\n                        name: 'TopLevel', attribs: {}, children: [\n                        { name: 'MidLevel', attribs: {}, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                        ] }\n                    ]\n                    }\n                ]\n                }), 'when diffed as html with options against', { diffWrappers: false }, createExpected({\n                    name: 'MidLevel', attribs: {}, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n                }), 'to output with weight', '<HigherOrderTopLevel id=\"main\">\\n' +\n                '  <TopLevel>\\n' +\n                '    <MidLevel><span id=\"childfoo\">one</span><span id=\"childfoo\">two</span></MidLevel>\\n' +\n                '  </TopLevel>\\n' +\n                '</HigherOrderTopLevel>', HtmlLikeUnexpected.DefaultWeights.OK);\n            });\n\n            it('ignores mixed wrapper->real->wrapper when diffWrappers is false', () => {\n\n                return expect(createActual({\n                    name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                    {\n                        name: 'TopLevel', attribs: { id: 'main' }, children: [\n                        { name: 'MidLevel', attribs: {}, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                        ] }\n                    ]\n                    }\n                ]\n                }), 'when diffed as html with options against', { diffWrappers: false }, createExpected({\n                    name: 'TopLevel', attribs: { id: 'main' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['changed'] }\n                ]\n                }), 'to output with weight', '<HigherOrderTopLevel id=\"main\">\\n' +\n                '  <TopLevel id=\"main\">\\n' +\n                '    <MidLevel>\\n' +\n                '      <span id=\"childfoo\">one</span>\\n' +\n                '      <span id=\"childfoo\">\\n' +\n                '        two // -two\\n' +\n                '            // +changed\\n' +\n                '      </span>\\n' +\n                '    </MidLevel>\\n' +\n                '  </TopLevel>\\n' +\n                '</HigherOrderTopLevel>', HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH);\n            });\n\n            it('ignores two mid level wrappers when diffWrappers is false', () => {\n\n                return expect(createActual({\n                    name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                    {\n                            name: 'MidLevel', attribs: {}, children: [\n                            {\n                                name: 'LowLevel', attribs: { id: 'lower' }, children: [\n                                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                                { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                            ]\n                            }\n                    ]\n                    }\n                ]\n                }), 'when diffed as html with options against', { diffWrappers: false }, createExpected({ name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n                }), 'to output with weight', '<HigherOrderTopLevel id=\"main\">\\n' +\n                '  <MidLevel>\\n' +\n                '    <LowLevel id=\"lower\">\\n' +\n                '      <span id=\"childfoo\">one</span><span id=\"childfoo\">two</span>\\n' +\n                '    </LowLevel>\\n' +\n                '  </MidLevel>\\n' +\n                '</HigherOrderTopLevel>', HtmlLikeUnexpected.DefaultWeights.OK);\n            });\n\n        });\n    });\n\n    describe('contains', () => {\n\n        it('finds an exact match', () => {\n            return expect(createActual(\n                { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }\n            ), 'when checked to contain', createExpected(\n                { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }\n            ), 'to satisfy', { found: true });\n        });\n\n        it('reports not found when no exact match exists', () => {\n\n            return expect(createActual(\n                { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }\n            ), 'when checked to contain', createExpected(\n                { name: 'span', attribs: { className: 'foo' }, children: [ 'some other content'] }\n            ), 'to satisfy', { found: false });\n        });\n\n\n        it('outputs a best match when the content is different', () => {\n\n            return expect(createActual({ name: 'div', attribs: {}, children: [\n                { name: 'span', attribs: { className: 'foo' }, children: [ 'some different content' ] }\n            ]\n            }), 'when checked to contain', createExpected(\n                { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }\n            ), 'to output', '<span className=\"foo\">\\n' +\n            '  some different content // -some different content\\n' +\n            '                         // +some content\\n' +\n            '</span>');\n        });\n\n        it('ignores wrappers when diffWrappers:false', () => {\n\n            return expect(createActual({ name: 'body', attribs: {}, children: [\n\n                { name: 'div', attribs: {}, children:\n                    [\n                        {\n                            name: 'wrapper', attribs: { className: 'the-wrapper' },\n                            children:\n                                [\n                                    { name: 'span', attribs: { className: 'foo' }, children: ['some content'] }\n                                ]\n\n                        }\n                    ]\n                }\n            ] }), 'when checked with options to contain', { diffWrappers: false }, createExpected({ name: 'div', attribs: {}, children: [\n                { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }\n            ] }), 'to satisfy', { found: true });\n\n        });\n\n        it('outputs wrappers when diffWrappers:false', () => {\n\n            return expect(createActual({\n                name: 'body', attribs: {}, children: [\n\n                {\n                    name: 'div', attribs: {}, children: [\n                    {\n                        name: 'wrapper', attribs: { className: 'the-wrapper' },\n                        children: [\n                            { name: 'span', attribs: { className: 'foo' }, children: ['some different content'] }\n                        ]\n\n                    }\n                ]\n                }\n            ]\n            }), 'when checked with options to contain', { diffWrappers: false }, createExpected({\n                name: 'div', attribs: {}, children: [\n                { name: 'span', attribs: { className: 'foo' }, children: ['some content'] }\n            ]\n            }), 'to output', '<div>\\n' +\n            '  <wrapper className=\"the-wrapper\">\\n' +\n            '    <span className=\"foo\">\\n' +\n            '      some different content // -some different content\\n' +\n            '                             // +some content\\n' +\n            '    </span>\\n' +\n            '  </wrapper>\\n' +\n            '</div>');\n        });\n\n    });\n\n    describe('expect.it', () => {\n\n        it('outputs the output from an expect.it attribute assertion', () => {\n\n            // This is nested deliberately, to ensure the deep promise is checked properly\n            return expect(createActual({\n                    name: 'TopLevel', attribs: {}, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ]\n            }), 'when diffed as html against', createExpected({\n                name: 'TopLevel', attribs: {}, children: [\n                { name: 'span', attribs: { id: expect.it('to match', /[a-f]+$/) }, children: ['one'] },\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n            ]\n            }), 'to output with weight', '<TopLevel>\\n' +\n            '  <span id=\"childfoo\" // expected \\'childfoo\\' to match /[a-f]+$/\\n' +\n            '  >\\n' +\n            '    one\\n' +\n            '  </span>\\n' +\n            '  <span id=\"childfoo\">two</span>\\n' +\n            '</TopLevel>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH);\n        });\n\n        it('outputs the output from an expect.it attribute assertion with two clauses', () => {\n\n            return expect(createActual({\n                name: 'TopLevel', attribs: {}, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'TopLevel', attribs: {}, children: [\n                { name: 'span', attribs: { id: expect.it('to match', /[a-f]+$/).and('to have length', 8) }, children: ['one'] },\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n            ]\n            }), 'to output with weight', '<TopLevel>\\n' +\n            '  <span id=\"childfoo\" // ⨯ expected \\'childfoo\\' to match /[a-f]+$/ and\\n' +\n            '                      // ✓ expected \\'childfoo\\' to have length 8\\n' +\n            '  >\\n' +\n            '    one\\n' +\n            '  </span>\\n' +\n            '  <span id=\"childfoo\">two</span>\\n' +\n            '</TopLevel>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH);\n        });\n\n\n        it('outputs the output from an expect.it attribute assertion with two clauses', () => {\n\n            return expect(createActual({\n                name: 'TopLevel', attribs: {}, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n            ]\n            }), 'when diffed as html against', createExpected({\n                name: 'TopLevel', attribs: {}, children: [\n                { name: 'span', attribs: { id: expect.it('to match', /[a-f]+$/).and('to have length', 8) }, children: ['one'] },\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n            ]\n            }), 'to output with weight', '<TopLevel>\\n' +\n            '  <span id=\"childfoo\" // ⨯ expected \\'childfoo\\' to match /[a-f]+$/ and\\n' +\n            '                      // ✓ expected \\'childfoo\\' to have length 8\\n' +\n            '  >\\n' +\n            '    one\\n' +\n            '  </span>\\n' +\n            '  <span id=\"childfoo\">two</span>\\n' +\n            '</TopLevel>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH);\n        });\n\n        it('outputs the output from an asynchronous expect.it attribute assertion that fails', () => {\n\n            return expect(\n                createActual({ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }),\n                'when diffed as html against',\n                createExpected(\n                    { name: 'span', attribs: { id: expect.it('to eventually have value', 'not childfoo') }, children: ['one'] }\n                ),\n                'to output with weight',\n                '<span id=\"childfoo\" // expected \\'childfoo\\' to eventually have value \\'not childfoo\\'\\n' +\n                '>\\n' +\n                '  one\\n' +\n                '</span>',\n                HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH\n            );\n        });\n\n        it('outputs the output from an asynchronous expect.it attribute assertion that passes', () => {\n\n            return expect(\n                createActual({ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }),\n                'when diffed as html against',\n                createExpected(\n                    { name: 'span', attribs: { id: expect.it('to eventually have value', 'childfoo') }, children: ['one'] }\n                ),\n                'to output with weight',\n                '<span id=\"childfoo\">one</span>',\n                HtmlLikeUnexpected.DefaultWeights.OK\n            );\n        });\n\n        it('outputs the output from an asynchronous expect.it content assertion that fails', () => {\n\n            return expect(\n                createActual({ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }),\n                'when diffed as html against',\n                createExpected(\n                    { name: 'span', attribs: { id: 'childfoo' }, children: [ expect.it('to eventually have value', 'not one') ] }\n                ),\n                'to output with weight',\n                '<span id=\"childfoo\">\\n' +\n                \"  one // expected 'one' to eventually have value 'not one'\\n\" +\n                '</span>',\n                HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH\n            );\n        });\n\n        it('outputs the output from an asynchronous expect.it content assertion that passes', () => {\n\n            return expect(\n                createActual({ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }),\n                'when diffed as html against',\n                createExpected(\n                    { name: 'span', attribs: { id: 'childfoo' }, children: [ expect.it('to eventually have value', 'one') ] }\n                ),\n                'to output with weight',\n                '<span id=\"childfoo\">one</span>',\n                HtmlLikeUnexpected.DefaultWeights.OK\n            );\n        });\n\n        it('works out which children match best, with asynchronous expect.it assertions in the children', () => {\n            return expect(createActual({ name: 'div', attribs: {}, children: [\n                { name: 'span', attribs: {}, children: [ 'one' ] },\n                { name: 'span', attribs: {}, children: [ 'two' ] },\n                { name: 'span', attribs: {}, children: [ 'four' ] }\n            ] }), 'when diffed as html against', createExpected({ name: 'div', attribs: {}, children: [\n                { name: 'span', attribs: {}, children: [ expect.it('to eventually have value', 'one') ] },\n                { name: 'span', attribs: {}, children: [ expect.it('to eventually have value', 'two') ] },\n                { name: 'span', attribs: {}, children: [ expect.it('to eventually have value', 'three') ] },\n                { name: 'span', attribs: {}, children: [ expect.it('to eventually have value', 'four') ] }\n            ] }), 'to output with weight', '<div>\\n' +\n            '  <span>one</span>\\n' +\n            '  <span>two</span>\\n' +\n            '  // missing <span>{expect.it(\\'to eventually have value\\', \\'three\\')}</span>\\n' +\n            '  <span>four</span>\\n' +\n            '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_MISSING);\n        });\n    });\n});\n"]}
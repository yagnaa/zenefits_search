{"version":3,"sources":["../../src/tests/lineBreaker.spec.js"],"names":[],"mappings":"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","file":"lineBreaker.spec.js","sourcesContent":["\nimport Unexpected from 'unexpected';\nimport MagicPen from 'magicpen';\nimport LineBreaker from '../lineBreaker';\n\nconst expect = Unexpected.clone();\nexpect.output.preferredWidth = 80;\n\ndescribe('magicpen-linebreaker', () => {\n\n    let pen;\n    beforeEach(() => {\n        pen = new MagicPen({\n            indentationWidth: 2\n        });\n    });\n\n    it('outputs a single string', () => {\n\n        const breaker = LineBreaker.breakAt(pen, 50);\n        breaker.add(thispen => thispen.text('hello world'));\n\n        expect(breaker.getOutput().output.toString(), 'to equal', 'hello world');\n    });\n\n    it('outputs a single line when it fits', () => {\n\n\n        const breaker = LineBreaker.breakAt(pen, 50);\n        breaker.add(thispen => thispen.text('<div>'))\n               .add(thispen => thispen.text('content'))\n               .add(thispen => thispen.text('</div>'));\n\n        expect(breaker.getOutput().output.toString(), 'to equal', '<div>content</div>');\n    });\n\n    it(\"outputs on multiple lines when it doesn't fit\", () => {\n\n        const breaker = LineBreaker.breakAt(pen, 20);\n        breaker.add(thispen => thispen.text('<div>').indentOnBreak())\n            .add(thispen => thispen.text('content that is longer than the maximum'))\n            .add(thispen => thispen.outdentOnBreak().text('</div>'));\n\n        expect(breaker.getOutput().output.toString(), 'to equal',\n            '<div>\\n' +\n            '  content that is longer than the maximum\\n' +\n            '</div>');\n    });\n\n    it('apends multiple children', () => {\n\n        const breaker = LineBreaker.breakAt(pen, 20);\n        breaker.add(thispen => thispen.text('<div>').indentOnBreak())\n            .add(thispen => thispen.text('content that is longer than the maximum'))\n            .add(thispen => thispen.text('XX'))\n            .add(thispen => thispen.outdentOnBreak().text('</div>'));\n\n        expect(breaker.getOutput().output.toString(), 'to equal',\n            '<div>\\n' +\n            '  content that is longer than the maximum\\n' +\n            '  XX\\n' +\n            '</div>');\n    });\n\n    it('apends multiple children on a single line', () => {\n\n        const breaker = LineBreaker.breakAt(pen, 80);\n        breaker.add(thispen => thispen.text('<div>').indentOnBreak())\n            .add(thispen => thispen.text('content that is shorter than the maximum'))\n            .add(thispen => thispen.text('XX'))\n            .add(thispen => thispen.outdentOnBreak().text('</div>'));\n\n        expect(breaker.getOutput().output.toString(), 'to equal',\n            '<div>content that is shorter than the maximumXX</div>');\n    });\n\n    it('forces multilines on forceLineBreak', () => {\n\n        const breaker = LineBreaker.breakAt(pen, 80);\n        breaker.add(thispen => thispen.text('<div>').indentOnBreak())\n            .add(thispen => thispen.text('content'))\n            .add(thispen => thispen.text('content2').forceLineBreak())\n            .add(thispen => thispen.text('content3'))\n            .add(thispen => thispen.outdentOnBreak().text('</div>'));\n\n        expect(breaker.getOutput().output.toString(), 'to equal',\n            '<div>\\n' +\n            '  content\\n' +\n            '  content2\\n' +\n            '  content3\\n' +\n            '</div>');\n    });\n\n    it('appends a line break when forceLineBreak used on last line', () => {\n        const breaker = LineBreaker.breakAt(pen, 80);\n        breaker.add(thispen => thispen.text('<div').indentOnBreak())\n            .add(thispen => thispen.text(' data-test=\"cheese\"'))\n            .add(thispen => thispen.text(' data-attr1=\"x\" // should be attr1=\"1\"').forceLineBreak());\n\n        const output = breaker.getOutput().output;\n        pen.append(output);\n        pen.append('/>');\n        expect(pen.toString(), 'to equal',\n            '<div\\n' +\n            '   data-test=\"cheese\"\\n' +\n            '   data-attr1=\"x\" // should be attr1=\"1\"\\n' +\n            '/>');\n    });\n\n    it(\"doesn't append a line break when forceLineBreak used on last line with allowForceLastLineBreak = false\", () => {\n        const breaker = LineBreaker.breakAt(pen, 80);\n        breaker.add(thispen => thispen.text('<div').indentOnBreak())\n            .add(thispen => thispen.text(' data-test=\"cheese\"'))\n            .add(thispen => thispen.text(' data-attr1=\"x\" // should be data-attr1=\"1\"').forceLineBreak());\n\n        const output = breaker.getOutput({ allowForceLastLineBreak: false }).output;\n        pen.append(output);\n        pen.append('/>');\n        expect(pen.toString(), 'to equal',\n            '<div\\n' +\n            '   data-test=\"cheese\"\\n' +\n            '   data-attr1=\"x\" // should be data-attr1=\"1\"/>');\n    });\n\n    it('appends a line break when using appendBreakIfHadBreaks', () => {\n\n        const breaker = LineBreaker.breakAt(pen, 80);\n        breaker.add(thispen => thispen.text('<div').indentOnBreak())\n            .add(thispen => thispen.text(' data-attr1=\"x\" // should be data-attr1=\"1\"').forceLineBreak())\n            .add(thispen => thispen.text(' data-test=\"cheese\"'));\n\n        const output = breaker.getOutput({ appendBreakIfHadBreaks: true }).output;\n        pen.append(output);\n        pen.append('/>');\n        expect(pen.toString(), 'to equal',\n            '<div\\n' +\n            '   data-attr1=\"x\" // should be data-attr1=\"1\"\\n' +\n            '   data-test=\"cheese\"\\n' +\n            '/>');\n    });\n\n    it(\"doesn't append a line break when using appendBreakIfHadBreaks when last line is forceLineBreak\", () => {\n\n        const breaker = LineBreaker.breakAt(pen, 80);\n        breaker.add(thispen => thispen.text('<div').indentOnBreak())\n            .add(thispen => thispen.text(' data-test=\"cheese\"'))\n            .add(thispen => thispen.text(' data-attr1=\"x\" // should be data-attr1=\"1\"').forceLineBreak());\n\n        const output = breaker.getOutput({ appendBreakIfHadBreaks: true }).output;\n        pen.append(output);\n        pen.append('/>');\n        expect(pen.toString(), 'to equal',\n            '<div\\n' +\n            '   data-test=\"cheese\"\\n' +\n            '   data-attr1=\"x\" // should be data-attr1=\"1\"\\n' +\n            '/>');\n    });\n\n    it('returns that break is needed after when forceLineBreak on last line', () => {\n\n        const breaker = LineBreaker.breakAt(pen, 80);\n        breaker.add(thispen => thispen.text('<div').indentOnBreak())\n            .add(thispen => thispen.text(' data-test=\"cheese\"'))\n            .add(thispen => thispen.text(' data-attr1=\"x\" // should be data-attr1=\"1\"').forceLineBreak());\n\n        const output = breaker.getOutput({ appendBreakIfHadBreaks: true });\n        expect(output, 'to satisfy', {\n            breakAfter: true,\n            breakBefore: false\n        });\n    });\n\n    it('returns that a break is needed where forceLineBreakBefore on first line', () => {\n\n        const breaker = LineBreaker.breakAt(pen, 80);\n        breaker.add(thispen => thispen.forceLineBreakBefore().text('// missing <span />'))\n            .add(thispen => thispen.text('<span />'));\n\n        const output = breaker.getOutput({ appendBreakIfHadBreaks: true });\n        expect(output, 'to satisfy', {\n            breakAfter: false,\n            breakBefore: true\n        });\n    });\n\n    describe('when using groupContent', () => {\n\n        it('groups content onto single line between forces breaks', () => {\n\n            const breaker = LineBreaker.breakAt(pen, 100);\n            breaker.add(thispen => thispen.text('<div').indentOnBreak())\n                .add(thispen => thispen.text(' data-attr1=\"1\"'))\n                .add(thispen => thispen.text(' data-attr2=\"2\"'))\n                .add(thispen => thispen.text(' data-attr3=\"3\"'))\n                .add(thispen => thispen.text(' data-attr4=\"x\" // should be data-attr4=\"4\"').forceLineBreak())\n                .add(thispen => thispen.text(' data-attr5=\"5\"'))\n                .add(thispen => thispen.text(' data-attr6=\"6\"'))\n                .add(thispen => thispen.text(' data-attr7=\"x\" // should be data-attr7=\"7\"').forceLineBreak())\n                .add(thispen => thispen.text(' data-attr8=\"8\"'))\n                .add(thispen => thispen.outdentOnBreak().wrapIfHadBreaks())\n                .add(thispen => thispen.text('>').wrapIfHadBreaks().indentOnBreak())\n                .add(thispen => thispen.text('pre content'))\n                .add(thispen => thispen.text('content').wrapIfHadBreaks())\n                .add(thispen => thispen.outdentOnBreak().text('</div>'));\n\n            expect(breaker.getOutput({ groupContent: true }).output.toString(), 'to equal',\n            '<div data-attr1=\"1\" data-attr2=\"2\" data-attr3=\"3\" data-attr4=\"x\" // should be data-attr4=\"4\"\\n' +\n            '   data-attr5=\"5\" data-attr6=\"6\" data-attr7=\"x\" // should be data-attr7=\"7\"\\n' +\n            '   data-attr8=\"8\"\\n' +\n            '>\\n' +\n            '  pre contentcontent\\n' +\n            '</div>');\n        });\n\n        it('breaks lines at maxwidth', () => {\n\n            const breaker = LineBreaker.breakAt(pen, 35);\n            breaker.add(thispen => thispen.text('<div').indentOnBreak())\n                .add(thispen => thispen.text(' data-attr1=\"1\"'))\n                .add(thispen => thispen.text(' data-attr2=\"2\"'))\n                .add(thispen => thispen.text(' data-attr3=\"3\"'))\n                .add(thispen => thispen.text(' data-attr4=\"x\" // should be data-attr4=\"4\"').forceLineBreak())\n                .add(thispen => thispen.text(' data-attr5=\"5\"'))\n                .add(thispen => thispen.text(' data-attr6=\"6\"'))\n                .add(thispen => thispen.text(' data-attr7=\"x\" // should be data-attr7=\"7\"').forceLineBreak())\n                .add(thispen => thispen.text(' data-attr8=\"8\"'))\n                .add(thispen => thispen.outdentOnBreak().wrapIfHadBreaks())\n                .add(thispen => thispen.text('>').wrapIfHadBreaks().indentOnBreak())\n                .add(thispen => thispen.text('pre content'))\n                .add(thispen => thispen.text('content').wrapIfHadBreaks())\n                .add(thispen => thispen.outdentOnBreak().text('</div>'));\n\n            expect(breaker.getOutput({ groupContent: true }).output.toString(), 'to equal',\n                '<div data-attr1=\"1\" data-attr2=\"2\"\\n' +\n                '   data-attr3=\"3\"\\n' +\n                '   data-attr4=\"x\" // should be data-attr4=\"4\"\\n' +\n                '   data-attr5=\"5\" data-attr6=\"6\"\\n' +\n                '   data-attr7=\"x\" // should be data-attr7=\"7\"\\n' +\n                '   data-attr8=\"8\"\\n' +\n                '>\\n' +\n                '  pre contentcontent\\n' +\n                '</div>');\n        });\n\n        it('forces a line break before the content when using forceLineBreakBefore()', () => {\n\n            const breaker = LineBreaker.breakAt(pen, 80);\n            breaker.add(thispen => thispen.text('<div>').indentOnBreak().newLineIfMultiLine())\n                .add(thispen => thispen.text('<span>one</span>'))\n                .add(thispen => thispen.text('<span>two</span>'))\n                .add(thispen => thispen.text('<span>three</span> // should be xxx').forceLineBreakBefore().forceLineBreak())\n                .add(thispen => thispen.outdentOnBreak().text('</div>'));\n\n            expect(breaker.getOutput({ groupContent: true }).output.toString(), 'to equal',\n                '<div>\\n' +\n                '  <span>one</span><span>two</span>\\n' +\n                '  <span>three</span> // should be xxx\\n' +\n                '</div>');\n\n        });\n    });\n});"]}
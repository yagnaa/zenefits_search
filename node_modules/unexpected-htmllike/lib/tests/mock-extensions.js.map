{"version":3,"sources":["../../src/tests/mock-extensions.js"],"names":[],"mappings":"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","file":"mock-extensions.js","sourcesContent":["\nimport HtmlLikeUnexpected from '../index';\nimport MagicPenPrism from 'magicpen-prism';\nimport Diff from '../diff';\n\nimport {\n    expectedSymbol,\n    actualSymbol,\n    TestExpectedAdapter,\n    TestActualAdapter,\n    createActual,\n    createExpected\n} from './mockEntities';\n\nmodule.exports = {\n    name: 'mock-extensions',\n\n    installInto(expect) {\n\n        function shiftResultOrPromise(resultOrPromise, expect) {\n            if (resultOrPromise && typeof resultOrPromise.then === 'function') {\n                return resultOrPromise.then(result => {\n                    return expect.shift(result);\n                });\n            }\n            return expect.shift(resultOrPromise);\n\n        }\n\n        function getDiff(actual, expected, options) {\n            return Diff.diffElements(TestActualAdapter, TestExpectedAdapter, actual, expected, expect, options);\n        }\n\n        expect.use(MagicPenPrism);\n\n        expect.addType({\n            name: 'TestHtmlLikeActual',\n            identify: value => value && value.name && value.attribs && value.$actual === actualSymbol,\n            inspect: (value, depth, output, inspect) => {\n\n                const htmlLikeUnexpected = new HtmlLikeUnexpected(TestActualAdapter);\n                return htmlLikeUnexpected.inspect(value, depth, output, inspect);\n            }\n        });\n\n        expect.addType({\n            name: 'TestHtmlLikeExpected',\n            identify: value => value && value.name && value.attribs && value.$expected === expectedSymbol,\n            inspect: (value, depth, output, inspect) => {\n\n                const htmlLikeUnexpected = new HtmlLikeUnexpected(TestExpectedAdapter);\n                return htmlLikeUnexpected.inspect(value, depth, output, inspect);\n            }\n        });\n\n        expect.addAssertion('<expect.it> to have string representation <string>', (expect, subject, value) => {\n            expect.errorMode = 'bubble';\n            expect(expect.inspect(subject).toString('text'), 'to equal', value);\n        });\n\n        expect.addAssertion('<any> to inspect as <string>', (expect, subject, value) => {\n            expect(expect.inspect(subject).toString(), 'to equal', value);\n        });\n\n        expect.addAssertion('<TestHtmlLikeActual|string> when diffed against <TestHtmlLikeExpected|string> <assertion>', function (expect, subject, value) {\n\n            return shiftResultOrPromise(getDiff(subject, value, {}), expect);\n        });\n\n        expect.addAssertion('<TestHtmlLikeActual|string> when diffed with options against <object> <TestHtmlLikeExpected|string> <assertion>', function (expect, subject, options, value) {\n\n            return shiftResultOrPromise(getDiff(subject, value, options), expect);\n        });\n\n        expect.addAssertion('<TestHtmlLikeActual> when diffed as html against <TestHtmlLikeExpected> <assertion>', (expect, subject, value) => {\n\n            const htmlLikeUnexpected = new HtmlLikeUnexpected(TestActualAdapter);\n            //const pen = expect.output.clone();\n            const promiseOrResult = htmlLikeUnexpected.diff(TestExpectedAdapter, subject, value, expect);\n            return shiftResultOrPromise(promiseOrResult, expect);\n        });\n\n\n        expect.addAssertion('<TestHtmlLikeActual> when diffed as html with options against <object> <TestHtmlLikeExpected> <assertion>', (expect, subject, options, value) => {\n\n            const htmlLikeUnexpected = new HtmlLikeUnexpected(TestActualAdapter);\n            // const pen = expect.output.clone();\n\n            const promiseOrResult = htmlLikeUnexpected.diff(TestExpectedAdapter, subject, value, expect, options);\n            return shiftResultOrPromise(promiseOrResult, expect);\n        });\n\n        expect.addType({\n            name: 'HtmlDiffResult',\n            base: 'object',\n            identify: value => value && typeof value.weight === 'number'\n        });\n\n        expect.addAssertion('<HtmlDiffResult> to have weight <number>', (expect, subject, weight) => {\n            expect.withError(() => expect(subject.weight, 'to equal', weight), () => {\n                expect.fail({\n                    diff: function (output) {\n                        return {\n                            inline: false,\n                            diff: output.error('expected').text(' weight ').gray('to be ').text(weight).gray(' but was ').text(subject.weight)\n                        };\n                    }\n                });\n            });\n        });\n\n        expect.addAssertion('<HtmlDiffResult> to output <magicpen>', (expect, subject, pen) => {\n            expect.withError(() => expect(subject.output, 'to equal', pen), () => {\n                return expect.fail({\n                    diff: function (output, diff, inspect) {\n                        return {\n                            inline: false,\n                            diff: output.block(function () {\n                                this.append(inspect(subject.output));\n                            }).sp().block(function () {\n                                this.append(inspect(pen));\n                            })\n                        };\n                    }\n                });\n            });\n        });\n\n        expect.addAssertion('<HtmlDiffResult> to output <string>', (expect, subject, value) => {\n            const htmlLikeUnexpected = new HtmlLikeUnexpected(TestActualAdapter);\n            const pen = expect.output.clone('text');\n            pen.addStyle('appendInspected', function (arg) {\n                this.append(expect.inspect(arg));\n            }, true);\n            htmlLikeUnexpected.render(subject, pen, expect.diff.bind(expect), expect.inspect.bind(expect));\n            expect(pen.toString(), 'to equal', value);\n        });\n\n        expect.addAssertion('<HtmlDiffResult> to output with weight <string> <number>', (expect, subject, value, weight) => {\n\n            const htmlLikeUnexpected = new HtmlLikeUnexpected(TestActualAdapter);\n            const pen = expect.output.clone('text');\n            pen.addStyle('appendInspected', function (arg) {\n                this.append(expect.inspect(arg));\n            }, true);\n            htmlLikeUnexpected.render(subject, pen, expect.diff.bind(expect), expect.inspect.bind(expect));\n            expect.withError(() => expect(pen.toString(), 'to equal', value), e => {\n                return expect.fail({\n                    diff: function (output, diff, inspect) {\n                        return {\n                            inline: false,\n                            diff: output.block(function () {\n                                this.block(e.getDiff(output).diff).nl(2).block(inspect(subject.diff));\n                            })\n                        };\n                    }\n                });\n            });\n            expect(subject, 'to have weight', weight);\n        });\n\n        expect.addAssertion('<TestHtmlLikeActual> when checked to contain <TestHtmlLikeExpected> <assertion>', (expect, subject, value) => {\n            const htmlLikeUnexpected = new HtmlLikeUnexpected(TestActualAdapter);\n            const resultOrPromise = htmlLikeUnexpected.contains(TestExpectedAdapter, subject, value, expect, null);\n            return shiftResultOrPromise(resultOrPromise, expect);\n        });\n\n        expect.addAssertion('<TestHtmlLikeActual> when checked with options to contain <object> <TestHtmlLikeExpected> <assertion>', (expect, subject, options, value) => {\n            const htmlLikeUnexpected = new HtmlLikeUnexpected(TestActualAdapter);\n            const resultOrPromise = htmlLikeUnexpected.contains(TestExpectedAdapter, subject, value, expect, options);\n            return shiftResultOrPromise(resultOrPromise, expect);\n        });\n\n        expect.addType({\n            name: 'ContainsResult',\n            base: 'object',\n            identify: value => {\n                return value &&\n                    typeof value.found === 'boolean' &&\n                    value.hasOwnProperty('bestMatch');\n            }\n        });\n\n        expect.addAssertion('<ContainsResult> to output <string>', (expect, subject, value) => {\n\n            const htmlLikeUnexpected = new HtmlLikeUnexpected(TestActualAdapter);\n            const pen = expect.output.clone();\n            pen.addStyle('appendInspected', function (arg) {\n                this.append(expect.inspect(arg));\n            }, true);\n            htmlLikeUnexpected.render(subject.bestMatch, pen, expect.diff.bind(expect), expect.inspect.bind(expect));\n            expect.errorMode = 'bubble';\n            expect(subject.bestMatch, 'not to be null');\n            expect(pen.toString(), 'to equal', value);\n        });\n\n        // Dummy assertion for testing async expect.it\n        expect.addAssertion('<string> to eventually have value <string>', (expect, subject, value) => {\n\n            return expect.promise((resolve, reject) => {\n\n                setTimeout(() => {\n                    if (subject === value) {\n                        resolve();\n                    } else {\n                        try {\n                            expect.fail('Failed');\n                        } catch (e) {\n                            reject(e); // Return the UnexpectedError object\n                        }\n                    }\n                }, 10);\n            });\n        });\n    }\n};\n"]}
{"version":3,"sources":["../../src/tests/HtmlLikeComponent.spec.js"],"names":[],"mappings":"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","file":"HtmlLikeComponent.spec.js","sourcesContent":["\nimport HtmlLikeUnexpected from '../';\nimport MagicPen from 'magicpen';\nimport MagicPenPrism from 'magicpen-prism';\nimport Unexpected from 'unexpected';\nimport ObjectAssign from 'object-assign';\n\nconst expect = Unexpected.clone();\n\nconst TestAdapter = {\n        getName(comp) { return comp.name; },\n\n        getAttributes(comp) { return comp.attribs; },\n\n        getChildren(comp) {\n            return [].concat([], comp.children);\n        }\n};\n\nexpect.addType({\n    name: 'TestHtmlLike',\n    identify: value => value && value.name && value.attribs && value.children,\n    inspect: (value, depth, output, inspect) => {\n\n        const htmlLikeUnexpected = new HtmlLikeUnexpected(TestAdapter, TestAdapter);\n        return htmlLikeUnexpected.inspect(value, depth, output, inspect);\n    },\n\n    diff: (actual, expected, output, diff, inspect, equal) => {\n        const htmlLikeUnexpected = new HtmlLikeUnexpected(TestAdapter, TestAdapter);\n        return htmlLikeUnexpected.inspect(value, depth, output, inspect);\n    }\n});\n\nexpect.addAssertion('<any> to inspect as <string>', (expect, subject, value) => {\n    expect(expect.inspect(subject).toString(), 'to equal', value);\n});\n\nexpect.addAssertion('<TestHtmlLike> when diffed against <TestHtmlLike> <assertion>', (expect, subject, value) => {\n\n    const htmlLikeUnexpected = new HtmlLikeUnexpected(TestAdapter);\n    const pen = expect.output.clone();\n    const result = htmlLikeUnexpected.diff(TestAdapter, subject, value, pen, expect.diff.bind(expect), expect.inspect.bind(expect), expect.equal.bind(expect));\n    return expect.shift(result);\n});\n\nexpect.addAssertion('<TestHtmlLike> when diffed with options against <object> <TestHtmlLike> <assertion>', (expect, subject, options, value) => {\n\n    const htmlLikeUnexpected = new HtmlLikeUnexpected(TestAdapter);\n    const pen = expect.output.clone();\n    const result = htmlLikeUnexpected.diff(TestAdapter, subject, value, pen, expect.diff.bind(expect), expect.inspect.bind(expect), expect.equal.bind(expect), options);\n    return expect.shift(result);\n});\n\nexpect.addType({\n    name: 'HtmlDiffResult',\n    identify: value => value && value.output && value.weight && typeof value.weight.real === 'number'\n});\n\nexpect.addAssertion('<HtmlDiffResult> to have weight <number>', (expect, subject, weight) => {\n    expect.withError(() => expect(subject.weight.real, 'to equal', weight), e => {\n        expect.fail({\n            diff: function (output) {\n                return {\n                    inline: false,\n                    diff: output.error('expected').text(' weight ').gray('to be ').text(weight).gray(' but was ').text(subject.weight.real)\n                };\n            }\n        })\n    });\n});\n\nexpect.addAssertion('<HtmlDiffResult> to output <magicpen>', (expect, subject, pen) => {\n    expect.withError(() => expect(subject.output, 'to equal', pen), e => {\n      return expect.fail({\n          diff: function (output, diff, inspect, equal) {\n             return {\n                 inline: false,\n                 diff: output.block(function () {\n                     this.append(inspect(subject.output))\n                 }).sp().block(function () {\n                     this.append(inspect(pen))\n                 })\n             };\n          }\n      })\n    });\n});\n\nexpect.addAssertion('<HtmlDiffResult> to output <string>', (expect, subject, value) => {\n    expect(subject.output.toString(), 'to equal', value);\n});\n\nexpect.addAssertion('<HtmlDiffResult> to output with weight <string> <number>', (expect, subject, value, weight) => {\n    expect(subject.output.toString(), 'to equal', value);\n    expect(subject, 'to have weight', weight);\n});\n\n\nexpect.use(MagicPenPrism);\n\nconst prismPen = MagicPen();\nprismPen.use(MagicPenPrism);\n\ndescribe('HtmlLikeComponent', () => {\n\n\n    it('outputs a formatted output with no children', () => {\n        expect({ name: 'div', attribs: { id: 'foo', className: 'bar' }, children: [] }, 'to inspect as',\n        '<div id=\"foo\" className=\"bar\" />');\n\n    });\n\n    it('outputs a formatted output with children', () => {\n\n        expect({\n            name: 'div', attribs: {id: 'foo', className: 'bar'}, children: [\n                {\n                    name: 'span',\n                    attribs: { className: 'child1' },\n                    children: ['child content 1']\n                },\n                {\n                    name: 'span',\n                    attribs: { className: 'child2' },\n                    children: ['child content 2']\n                }\n            ]\n        }, 'to inspect as',\n            '<div id=\"foo\" className=\"bar\">\\n' +\n            '  <span className=\"child1\">child content 1</span>\\n' +\n            '  <span className=\"child2\">child content 2</span>\\n' +\n            '</div>');\n    });\n\n    it('outputs object attributes', () => {\n        expect({\n                name: 'div', attribs: { style: { width: 125, height: 100 } }, children: [\n                ]\n            }, 'to inspect as',\n            '<div style={{ width: 125, height: 100 }} />');\n\n    });\n\n    it.only('outputs large object attributes over multiple lines', () => {\n        expect({\n                name: 'div',\n                attribs: {\n                    style: {\n                        width: 125,\n                        height: 100,\n                        background: '#ff6600 url(\"blah blah blah blah blah\")'\n                    }\n                }, children: []\n            }, 'to inspect as',\n            '<div style={{ width: 125, height: 100 }} />');\n\n    });\n\n    it('outputs deeply nested children over multiple lines', () => {\n\n        expect({\n                name: 'div', attribs: { id: 'outside-wrapper', className: 'wrap-me' }, children: [\n                    {\n                        name: 'div', attribs: {id: 'foo', className: 'bar'}, children: [\n                        {\n                            name: 'span',\n                            attribs: { className: 'child1' },\n                            children: ['child content 1']\n                        },\n                        {\n                            name: 'span',\n                            attribs: { className: 'child2' },\n                            children: ['child content 2']\n                        }\n                    ]\n                    }\n                ]\n    }, 'to inspect as',\n            '<div id=\"outside-wrapper\" className=\"wrap-me\">\\n' +\n            '  <div id=\"foo\" className=\"bar\">\\n' +\n            '    <span className=\"child1\">child content 1</span>\\n' +\n            '    <span className=\"child2\">child content 2</span>\\n' +\n            '  </div>\\n' +\n            '</div>');\n\n    })\n\n    it('outputs children on a single line if it fits', () => {\n\n        expect({\n            name: 'div', attribs: {id: 'foo', className: 'bar'}, children: [\n                {\n                    name: 'span',\n                    children: ['1']\n                },\n                {\n                    name: 'span',\n                    children: ['2']\n                }\n            ]\n        }, 'to inspect as', '<div id=\"foo\" className=\"bar\"><span>1</span><span>2</span></div>');\n    });\n\n    it('outputs attributes on split lines if they are too long, with no content', () => {\n        expect({\n            name: 'div', attribs: {\n                id: 'foo',\n                className: 'bar blah mcgar',\n                'aria-role': 'special-long-button',\n                'data-special': 'some other long attrib'\n            },\n            children: []\n        }, 'to inspect as',\n            '<div\\n' +\n            '  id=\"foo\"\\n' +\n            '  className=\"bar blah mcgar\"\\n' +\n            '  aria-role=\"special-long-button\"\\n' +\n            '  data-special=\"some other long attrib\"\\n' +\n            '/>');\n    });\n\n    it('outputs attributes on split lines if they are too long, with content', () => {\n        expect({\n            name: 'div', attribs: {\n                id: 'foo',\n                className: 'bar blah mcgar',\n                'aria-role': 'special-long-button',\n                'data-special': 'some other long attrib'\n            },\n            children: ['some content']\n        }, 'to inspect as',\n            '<div\\n' +\n            '  id=\"foo\"\\n' +\n            '  className=\"bar blah mcgar\"\\n' +\n            '  aria-role=\"special-long-button\"\\n' +\n            '  data-special=\"some other long attrib\"\\n' +\n            '>\\n' +\n            '  some content\\n' +\n            '</div>');\n    });\n\n    describe('with no external inspect function', () => {\n\n        let htmlLikeUnexpected;\n        let pen;\n\n        beforeEach(() => {\n\n            htmlLikeUnexpected = new HtmlLikeUnexpected(TestAdapter);\n            pen = new MagicPen();\n            pen.use(MagicPenPrism);\n        });\n\n        it('outputs an object attribute with ellipses', () => {\n\n            htmlLikeUnexpected.inspect({\n                name: 'div', attribs: {special: {abc: 123, def: 'bar'}}, children: []\n            }, 0, pen);\n\n            expect(pen.toString(), 'to equal', '<div special={...} />');\n        });\n    });\n\n    describe('with an external inspect function', () => {\n\n        let htmlLikeUnexpected;\n        let pen;\n\n        beforeEach(() => {\n\n            htmlLikeUnexpected = new HtmlLikeUnexpected(TestAdapter);\n            pen = new MagicPen();\n            pen.use(MagicPenPrism);\n        });\n\n        it('outputs an inspected object attribute', () => {\n\n            htmlLikeUnexpected.inspect({\n                name: 'div', attribs: {special: {abc: 123, def: 'bar'}}, children: []\n            }, 0, pen, value => ('INSPECTED' + value.abc));\n            expect(pen.toString(), 'to equal', \"<div special={INSPECTED123} />\");\n        });\n    });\n\n    describe('diff', () => {\n\n       it('gets the weight correct for a single component with a different attribute', () => {\n\n           expect(\n               {\n                   name: 'div', attribs: { id: 'foo' }, children: []\n               },\n               'when diffed against',\n               {\n                   name: 'div', attribs: { id: 'bar' }, children: []\n               },\n               'to have weight', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH\n           );\n\n       });\n\n        it('outputs the diff of a single component with a different attribute', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: []\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'bar' }, children: []\n                },\n                'to output',\n                '<div id=\"foo\" // should be id=\"bar\" -foo\\n' +\n                '              //                    +bar\\n' +\n                '/>'\n            );\n\n        });\n\n        it('outputs attributes that are different types but evaluate to the same string', () => {\n            expect(\n                {\n                    name: 'div', attribs: { id: '42' }, children: []\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 42 }, children: []\n                },\n                'to output with weight',\n                '<div id=\"42\" // should be id={42}  42\\n' +\n                '/>', 1);\n\n        });\n\n        it('outputs the diff of a single component with a different attribute and a matching attribute after', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo', className: 'testing' }, children: []\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'bar', className: 'testing' }, children: []\n                },\n                'to output',\n                '<div id=\"foo\" // should be id=\"bar\" -foo\\n' +\n                '              //                    +bar\\n' +\n                '   className=\"testing\"\\n' +\n                '/>'\n            );\n        });\n\n        it('outputs the diff of a single component with a different attribute and a matching attribute before', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { className: 'testing', id: 'foo'  }, children: []\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { className: 'testing', id: 'bar' }, children: []\n                },\n                'to output',\n                '<div className=\"testing\" id=\"foo\" // should be id=\"bar\" -foo\\n' +\n                '                                  //                    +bar\\n' +\n                '/>'\n            );\n        });\n\n        it('breaks the output if there are lots of matching attributes', () => {\n\n            const attribs = {\n                attrib1: 'aaa',\n                attrib2: 'hello world',\n                attrib3: 'testing is fun',\n                attrib4: 'hallo welt',\n                attrib5: 'jonny number five'\n            };\n\n            const afterAttribs = {\n                after: 'bbb',\n                after2: 'ccc some more words',\n                after3: 'here is some more'\n            };\n            const actualAttribs = ObjectAssign({}, attribs, { mismatch: 'foo' }, afterAttribs);\n            const expectedAttribs = ObjectAssign({}, attribs, { mismatch: 'bar' }, afterAttribs);\n\n            expect(\n                {\n                    name: 'div', attribs: actualAttribs, children: []\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: expectedAttribs, children: []\n                },\n                'to output',\n                '<div attrib1=\"aaa\" attrib2=\"hello world\" attrib3=\"testing is fun\"\\n' +\n                '   attrib4=\"hallo welt\" attrib5=\"jonny number five\"\\n' +\n                '   mismatch=\"foo\" // should be mismatch=\"bar\" -foo\\n' +\n                '                  //                          +bar\\n' +\n                '   after=\"bbb\" after2=\"ccc some more words\" after3=\"here is some more\"\\n' +\n                '/>'\n            );\n        });\n\n        it('highlights a missing attribute', () => {\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo'  }, children: []\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { className: 'testing', id: 'foo' }, children: []\n                },\n                'to output',\n                '<div id=\"foo\" // missing className=\"testing\"\\n' +\n                '/>'\n            );\n        });\n\n        it('highlights two missing attributes', () => {\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo'  }, children: []\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { className: 'testing', id: 'foo', extra: '123' }, children: []\n                },\n                'to output',\n                '<div id=\"foo\" // missing className=\"testing\"\\n' +\n                '   // missing extra=\"123\"\\n' +\n                '/>'\n            );\n        });\n\n        it('diffs a component with a single text child', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: ['abc']\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: ['def']\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  -abc\\n' +\n                '  +def\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH\n            );\n        });\n\n        it('diffs a component with mismatching content types', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [ '42' ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [ 42 ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  42 // mismatched type -string\\n' +\n                '     //                 +number\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.CONTENT_TYPE_MISMATCH\n            );\n        });\n\n        it('diffs a component with child components with different content', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: {}, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: {}, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['updated'] }\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <span>one</span>\\n' +\n                '  <span>\\n' +\n                '    -two\\n' +\n                '    +updated\\n' +\n                '  </span>\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH\n            );\n        });\n\n        it('diffs a component with child components with different tags', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'div', attribs: {}, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: {}, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <div // should be <span>\\n' +\n                '  >\\n' +\n                '    one\\n' +\n                '  </div>\\n' +\n                '  <span>two</span>\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.NAME_MISMATCH\n            );\n        });\n\n        it('diffs a component with child components with different attributes', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo'}, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childbar' }, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <span id=\"childfoo\" // should be id=\"childbar\" -childfoo\\n' +\n                '                      //                         +childbar\\n' +\n                '  >\\n' +\n                '    one\\n' +\n                '  </span>\\n' +\n                '  <span>two</span>\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH\n            );\n        });\n\n        it('diffs a component with a missing child', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo'}, children: ['one'] }\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <span id=\"childfoo\">one</span>\\n' +\n                '  // missing <span>two</span>\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_MISSING\n            );\n        });\n\n        it('diffs a component with an extra child', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo'}, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <span id=\"childfoo\">one</span>\\n' +\n                '  <span>two</span> // should be removed\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_INSERTED\n            );\n        });\n\n        it('diffs a component with a child that is an element and should be a string', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo'}, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    'some text'\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <span id=\"childfoo\">one</span>\\n' +\n                \"  <span>two</span> // should be 'some text'\\n\" +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.NATIVE_NONNATIVE_MISMATCH\n            );\n        });\n\n        it('lays out a diff where element should be wrapped but it all fits on one line', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: {}, children: [\n                    'two'\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: {}, children: [\n                    { name: 'child', attribs: {}, children: ['aa' ] }\n                ]\n                },\n                'to output with weight',\n                '<div>\\n' +\n                '  two // should be <child>aa</child>\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.NATIVE_NONNATIVE_MISMATCH\n            );\n\n        });\n\n        it('diffs a component with a child that is an deep element and should be a string', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo'}, children: ['one'] },\n                    { name: 'span', attribs: {}, children: [\n                        { name: 'span', attribs: { className: 'deep'}, children: ['nested and broken over many lines']}\n                    ] }\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    'some text'\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <span id=\"childfoo\">one</span>\\n' +\n                '  <span>                                                            // \\n' +\n                '    <span className=\"deep\">nested and broken over many lines</span> //\\n' +\n                \"  </span>                                                           // should be 'some text'\\n\" +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.NATIVE_NONNATIVE_MISMATCH\n            );\n        });\n\n        it('diffs a component with a child that is a string and should be an element', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo'}, children: ['one'] },\n                    'some text'\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: {}, children: ['two'] }\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <span id=\"childfoo\">one</span>\\n' +\n                '  some text // should be <span>two</span>\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.NATIVE_NONNATIVE_MISMATCH\n            );\n        });\n\n        it('diffs a component with a child that is a string and should be a deep multiline element', () => {\n\n            expect(\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo'}, children: ['one'] },\n                    'some text'\n                ]\n                },\n                'when diffed against',\n                {\n                    name: 'div', attribs: { id: 'foo' }, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: {}, children: [\n                        { name: 'span', attribs: { className: 'deep'}, children: ['nested and broken over many lines']}\n                    ] }\n                ]\n                },\n                'to output with weight',\n                '<div id=\"foo\">\\n' +\n                '  <span id=\"childfoo\">one</span>\\n' +\n                '  some text // should be <span>\\n' +\n                '            //             <span className=\"deep\">nested and broken over many lines</span>\\n' +\n                '            //           </span>\\n' +\n                '</div>', HtmlLikeUnexpected.DefaultWeights.NATIVE_NONNATIVE_MISMATCH\n            );\n        });\n\n        describe('with options', () => {\n\n            describe('diffExtraAttributes', () => {\n\n                it('accepts extra attributes when flag is false', () => {\n\n                    expect({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo', extraAttribute: 'does not matter'}, children: ['one'] }\n                        ]\n                    }, 'when diffed with options against', { diffExtraAttributes: false }, {\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                    }, 'to have weight', HtmlLikeUnexpected.DefaultWeights.OK);\n\n                });\n\n                it('diffs extra attributes when flag is true', () => {\n\n                    expect({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo', extraAttribute: 'does matter' }, children: ['one'] }\n                        ]\n                    }, 'when diffed with options against', { diffExtraAttributes: true }, {\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                    }, 'to output with weight',\n                        '<div id=\"foo\">\\n' +\n                        '  <span id=\"childfoo\" extraAttribute=\"does matter\" // extraAttribute should be removed\\n' +\n                        '  >\\n' +\n                        '    one\\n' +\n                        '  </span>\\n' +\n                        '</div>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_EXTRA);\n\n                });\n            });\n\n            describe('diffRemovedAttributes', () => {\n\n                it('diffs removed attributes when flag is true', () => {\n\n                    expect({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                    }, 'when diffed with options against', { diffRemovedAttributes: true }, {\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo', removedAttribute: 'does matter'}, children: ['one'] }\n                        ]\n                    }, 'to output with weight',\n                        '<div id=\"foo\">\\n' +\n                        '  <span id=\"childfoo\" // missing removedAttribute=\"does matter\"\\n' +\n                        '  >\\n' +\n                        '    one\\n' +\n                        '  </span>\\n' +\n                        '</div>', HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISSING);\n                });\n\n                it('ignores removed attributes when flag is false', () => {\n\n                    expect({\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                    }, 'when diffed with options against', { diffRemovedAttributes: false }, {\n                        name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo', removedAttribute: 'does matter'}, children: ['one'] }\n                        ]\n                    }, 'to output with weight',\n                        '<div id=\"foo\"><span id=\"childfoo\">one</span></div>', HtmlLikeUnexpected.DefaultWeights.OK);\n                });\n            });\n\n            describe('diffMissingChildren', () => {\n\n                it('diffs missing children when the flag is true', () => {\n\n                    expect(\n                        {\n                            name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                        }, 'when diffed with options against', { diffMissingChildren: true },\n                        {\n                            name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'removed-child' }, children: ['two'] }\n                        ]\n                        },\n                        'to output with weight',\n                        '<div id=\"foo\">\\n' +\n                        '  <span id=\"childfoo\">one</span>\\n' +\n                        '  // missing <span id=\"removed-child\">two</span>\\n' +\n                        '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_MISSING);\n                });\n\n                it('ignores missing children when the flag is false', () => {\n\n                    expect(\n                        {\n                            name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                        }, 'when diffed with options against', { diffMissingChildren: false },\n                        {\n                            name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'removed-child' }, children: ['two'] }\n                        ]\n                        },\n                        'to output with weight',\n                        '<div id=\"foo\"><span id=\"childfoo\">one</span></div>', HtmlLikeUnexpected.DefaultWeights.OK);\n                });\n            });\n\n            describe('diffExtraChildren', () => {\n\n                it('diffs extra children when the flag is true', () => {\n\n                    expect(\n                        {\n                            name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'extra-child' }, children: ['two'] }\n                        ]\n                        }, 'when diffed with options against', { diffExtraChildren: true },\n                        {\n                            name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                        },\n                        'to output with weight',\n                        '<div id=\"foo\">\\n' +\n                        '  <span id=\"childfoo\">one</span>\\n' +\n                        '  <span id=\"extra-child\">two</span> // should be removed\\n' +\n                        '</div>', HtmlLikeUnexpected.DefaultWeights.CHILD_INSERTED);\n                });\n\n                it('ignores extra children when the flag is false', () => {\n\n                    expect(\n                        {\n                            name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'extra-child' }, children: ['two'] }\n                        ]\n                        }, 'when diffed with options against', { diffExtraChildren: false },\n                        {\n                            name: 'div', attribs: { id: 'foo' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                        ]\n                        },\n                        'to output with weight',\n                        '<div id=\"foo\"><span id=\"childfoo\">one</span><span id=\"extra-child\">two</span></div>', HtmlLikeUnexpected.DefaultWeights.OK);\n                });\n            });\n        });\n\n        describe('wrappers', () => {\n\n            it('identifies an extra wrapper component around a single child', () => {\n\n                    expect(\n                        {\n                            name: 'body', attribs: { id: 'main' }, children: [\n                            {\n                                name: 'div', attribs: { id: 'wrapper' }, children: [\n                                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }\n                            ]\n                            }\n                        ]\n                    }, 'when diffed against',\n                {\n                    name: 'body', attribs: { id: 'main' }, children: [\n                    {\n                        name: 'span', attribs: { id: 'childfoo' }, children: ['one']\n                    }\n                    ]\n                },\n                    'to output with weight',\n                    '<body id=\"main\">\\n' +\n                    '  <div id=\"wrapper\"> // wrapper should be removed\\n' +\n                    '    <span id=\"childfoo\">one</span>\\n' +\n                    '  </div> // wrapper should be removed\\n' +\n                    '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED);\n            });\n\n            it('identifies an extra wrapper component around a many children', () => {\n\n                expect(\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        {\n                            name: 'div', attribs: { id: 'wrapper' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                        ]\n                        }\n                    ]\n                    }, 'when diffed against',\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                    ]\n                    },\n                    'to output with weight',\n                    '<body id=\"main\">\\n' +\n                    '  <div id=\"wrapper\"> // wrapper should be removed\\n' +\n                    '    <span id=\"childfoo\">one</span><span id=\"childfoo\">two</span>\\n' +\n                    '  </div> // wrapper should be removed\\n' +\n                    '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED);\n            });\n\n            it('identifies an extra wrapper component around a many children with some minor changes', () => {\n\n                expect(\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        {\n                            name: 'div', attribs: { id: 'wrapper' }, children: [\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                            { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                        ]\n                        }\n                    ]\n                    }, 'when diffed against',\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'other' }, children: ['changed'] }\n                    ]\n                    },\n                    'to output with weight',\n                    '<body id=\"main\">\\n' +\n                    '  <div id=\"wrapper\"> // wrapper should be removed\\n' +\n                    '    <span id=\"childfoo\">one</span>\\n' +\n                    '    <span id=\"childfoo\" // should be id=\"other\" -childfoo\\n' +\n                    '                        //                      +other\\n' +\n                    '    >\\n' +\n                    '      -two\\n' +\n                    '      +changed\\n' +\n                    '    </span>\\n' +\n                    '  </div> // wrapper should be removed\\n' +\n                    '</body>',\n                    HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED +\n                    HtmlLikeUnexpected.DefaultWeights.ATTRIBUTE_MISMATCH +\n                    HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH);\n            });\n\n            it('identifies an extra wrapper component around each child', () => {\n\n                expect(\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                            { name: 'childWrapper', attribs: {}, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }] },\n                            { name: 'childWrapper', attribs: {}, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }] }\n                    ]\n                    }, 'when diffed against',\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                    ]\n                    },\n                    'to output with weight',\n                    '<body id=\"main\">\\n' +\n                    '  <childWrapper> // wrapper should be removed\\n' +\n                    '    <span id=\"childfoo\">one</span>\\n' +\n                    '  </childWrapper> // wrapper should be removed\\n' +\n                    '  <childWrapper> // wrapper should be removed\\n' +\n                    '    <span id=\"childfoo\">two</span>\\n' +\n                    '  </childWrapper> // wrapper should be removed\\n' +\n                    '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED * 2);\n            });\n\n            it('identifies an extra wrapper component around each child with attributes', () => {\n\n                expect(\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        { name: 'childWrapper', attribs: { id: 'wrapper1' }, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }] },\n                        { name: 'childWrapper', attribs: { id: 'wrapper2' }, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }] }\n                    ]\n                    }, 'when diffed against',\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                    ]\n                    },\n                    'to output with weight',\n                    '<body id=\"main\">\\n' +\n                    '  <childWrapper id=\"wrapper1\"> // wrapper should be removed\\n' +\n                    '    <span id=\"childfoo\">one</span>\\n' +\n                    '  </childWrapper> // wrapper should be removed\\n' +\n                    '  <childWrapper id=\"wrapper2\"> // wrapper should be removed\\n' +\n                    '    <span id=\"childfoo\">two</span>\\n' +\n                    '  </childWrapper> // wrapper should be removed\\n' +\n                    '</body>', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED * 2);\n            });\n\n            it('ignores wrappers when using the diffWrappers=false flag', () => {\n\n                expect(\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        { name: 'childWrapper', attribs: {}, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['one'] }] },\n                        { name: 'childWrapper', attribs: {}, children: [{ name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }] }\n                    ]\n                    }, 'when diffed with options against', { diffWrappers: false },\n                    {\n                        name: 'body', attribs: { id: 'main' }, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                    ]\n                    },\n                    'to output with weight',\n                    '<body id=\"main\">\\n' +\n                    '  <childWrapper>\\n' +\n                    '    <span id=\"childfoo\">one</span>\\n' +\n                    '  </childWrapper>\\n' +\n                    '  <childWrapper>\\n' +\n                    '    <span id=\"childfoo\">two</span>\\n' +\n                    '  </childWrapper>\\n' +\n                    '</body>', HtmlLikeUnexpected.DefaultWeights.OK);\n            });\n\n            // TODO: Skip 2 wrapper    MainComp -> wrapper1 -> wrapper2 -> expectedComp\n            // Skip wrapper on main element    MainCompWrapper -> expected\n\n            it('diffs a top level wrapper', () => {\n\n                expect(\n                    {\n                        name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                        {\n                            name: 'TopLevel', attribs: {}, children: [\n                            {name: 'span', attribs: {id: 'childfoo'}, children: ['one']},\n                            {name: 'span', attribs: {id: 'childfoo'}, children: ['two']}\n                        ]\n                        }\n                    ]\n                    }, 'when diffed against',\n                    {\n                            name: 'TopLevel', attribs: {}, children: [\n                            {name: 'span', attribs: {id: 'childfoo'}, children: ['one']},\n                            {name: 'span', attribs: {id: 'childfoo'}, children: ['two']}\n                    ]\n                    }, 'to output with weight',\n                    '<HigherOrderTopLevel id=\"main\"> // wrapper should be removed\\n' +\n                    '  <TopLevel><span id=\"childfoo\">one</span><span id=\"childfoo\">two</span></TopLevel>\\n' +\n                    '</HigherOrderTopLevel> // wrapper should be removed', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED);\n            });\n\n            it('diffs a two levels of top level wrapper', () => {\n\n                expect(\n                    {\n                        name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                        {\n                            name: 'TopLevel', attribs: {}, children: [\n                            { name: 'MidLevel', attribs: {}, children: [\n                                {name: 'span', attribs: {id: 'childfoo'}, children: ['one']},\n                                {name: 'span', attribs: {id: 'childfoo'}, children: ['two']}\n                            ]}\n                        ]\n                        }\n                    ]\n                    }, 'when diffed against',\n                    {\n                        name: 'MidLevel', attribs: {}, children: [\n                        {name: 'span', attribs: {id: 'childfoo'}, children: ['one']},\n                        {name: 'span', attribs: {id: 'childfoo'}, children: ['two']}\n                    ]\n                    }, 'to output with weight',\n                    '<HigherOrderTopLevel id=\"main\"> // wrapper should be removed\\n' +\n                    '  <TopLevel> // wrapper should be removed\\n' +\n                    '    <MidLevel><span id=\"childfoo\">one</span><span id=\"childfoo\">two</span></MidLevel>\\n' +\n                    '  </TopLevel> // wrapper should be removed\\n' +\n                    '</HigherOrderTopLevel> // wrapper should be removed', HtmlLikeUnexpected.DefaultWeights.WRAPPER_REMOVED * 2);\n            });\n\n            it('ignores two levels of top level wrapper when diffWrappers is false', () => {\n\n                expect(\n                    {\n                        name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                        {\n                            name: 'TopLevel', attribs: {}, children: [\n                            { name: 'MidLevel', attribs: {}, children: [\n                                {name: 'span', attribs: {id: 'childfoo'}, children: ['one']},\n                                {name: 'span', attribs: {id: 'childfoo'}, children: ['two']}\n                            ]}\n                        ]\n                        }\n                    ]\n                    }, 'when diffed with options against', { diffWrappers: false },\n                    {\n                        name: 'MidLevel', attribs: {}, children: [\n                        {name: 'span', attribs: { id: 'childfoo' }, children: ['one']},\n                        {name: 'span', attribs: { id: 'childfoo' }, children: ['two']}\n                    ]\n                    }, 'to output with weight',\n                    '<HigherOrderTopLevel id=\"main\">\\n' +\n                    '  <TopLevel>\\n' +\n                    '    <MidLevel><span id=\"childfoo\">one</span><span id=\"childfoo\">two</span></MidLevel>\\n' +\n                    '  </TopLevel>\\n' +\n                    '</HigherOrderTopLevel>', HtmlLikeUnexpected.DefaultWeights.OK);\n            });\n\n            it('ignores mixed wrapper->real->wrapper when diffWrappers is false', () => {\n\n                expect(\n                    {\n                        name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                        {\n                            name: 'TopLevel', attribs: { id: 'main' }, children: [\n                            { name: 'MidLevel', attribs: {}, children: [\n                                {name: 'span', attribs: {id: 'childfoo'}, children: ['one']},\n                                {name: 'span', attribs: {id: 'childfoo'}, children: ['two']}\n                            ]}\n                        ]\n                        }\n                    ]\n                    }, 'when diffed with options against', { diffWrappers: false },\n                    {\n                        name: 'TopLevel', attribs: { id: 'main' }, children: [\n                        {name: 'span', attribs: { id: 'childfoo' }, children: ['one']},\n                        {name: 'span', attribs: { id: 'childfoo' }, children: ['changed']}\n                    ]\n                    }, 'to output with weight',\n                    '<HigherOrderTopLevel id=\"main\">\\n' +\n                    '  <TopLevel id=\"main\">\\n' +\n                    '    <MidLevel>\\n' +\n                    '      <span id=\"childfoo\">one</span>\\n' +\n                    '      <span id=\"childfoo\">\\n' +\n                    '        -two\\n' +\n                    '        +changed\\n' +\n                    '      </span>\\n' +\n                    '    </MidLevel>\\n' +\n                    '  </TopLevel>\\n' +\n                    '</HigherOrderTopLevel>', HtmlLikeUnexpected.DefaultWeights.STRING_CONTENT_MISMATCH);\n            });\n\n            it('ignores two mid level wrappers when diffWrappers is false', () => {\n\n                expect(\n                    {\n                        name: 'HigherOrderTopLevel', attribs: {id: 'main'}, children: [\n                        {\n                                name: 'MidLevel', attribs: {}, children: [\n                                {\n                                    name: 'LowLevel', attribs: {id: 'lower'}, children: [\n                                    {name: 'span', attribs: {id: 'childfoo'}, children: ['one']},\n                                    {name: 'span', attribs: {id: 'childfoo'}, children: ['two']}\n                                ]\n                                }\n                        ]\n                        }\n                    ]\n                    }, 'when diffed with options against', { diffWrappers: false },\n                    { name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                                {name: 'span', attribs: {id: 'childfoo'}, children: ['one']},\n                                {name: 'span', attribs: {id: 'childfoo'}, children: ['two']}\n                    ]\n                    }, 'to output with weight',\n                    '<HigherOrderTopLevel id=\"main\">\\n' +\n                    '  <MidLevel>\\n' +\n                    '    <LowLevel id=\"lower\">\\n' +\n                    '      <span id=\"childfoo\">one</span><span id=\"childfoo\">two</span>\\n' +\n                    '    </LowLevel>\\n' +\n                    '  </MidLevel>\\n' +\n                    '</HigherOrderTopLevel>', HtmlLikeUnexpected.DefaultWeights.OK);\n            });\n\n        });\n    });\n});"]}
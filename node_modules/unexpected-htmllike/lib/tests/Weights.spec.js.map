{"version":3,"sources":["../../src/tests/Weights.spec.js"],"names":[],"mappings":";;;;0BACuB,YAAY;;;;uBAEf,YAAY;;;;AAEhC,IAAM,MAAM,GAAG,wBAAW,KAAK,EAAE,CAAC;;AAElC,QAAQ,CAAC,SAAS,EAAE,YAAM;;AAEtB,QAAI,OAAO,YAAA,CAAC;;AAEZ,cAAU,CAAC,YAAM;AACb,eAAO,GAAG,0BAAa,CAAC;KAC3B,CAAC,CAAC;;AAEH,MAAE,CAAC,kBAAkB,EAAE,YAAM;;AAEzB,cAAM,CAAC,OAAO,EAAE,YAAY,EAAE;AAC1B,gBAAI,EAAE,CAAC;AACP,iBAAK,EAAE,CAAC;SACX,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,YAAQ,CAAC,KAAK,EAAE,YAAM;AAClB,UAAE,CAAC,uBAAuB,EAAE,YAAM;;AAE9B,mBAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAChB,kBAAM,CAAC,OAAO,EAAE,YAAY,EAAE;AAC1B,oBAAI,EAAE,EAAE;AACR,qBAAK,EAAE,EAAE;aACZ,CAAC,CAAC;SACN,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,YAAQ,CAAC,SAAS,EAAE,YAAM;;AAEtB,UAAE,CAAC,sDAAsD,EAAE,YAAM;;AAE7D,mBAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACpB,kBAAM,CAAC,OAAO,EAAE,YAAY,EAAE;AAC1B,oBAAI,EAAE,EAAE;AACR,qBAAK,EAAE,CAAC;aACX,CAAC,CAAC;SACN,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,YAAQ,CAAC,UAAU,EAAE,YAAM;;AAEvB,UAAE,CAAC,wDAAwD,EAAE,YAAM;;AAE/D,mBAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACrB,kBAAM,CAAC,OAAO,EAAE,YAAY,EAAE;AAC1B,oBAAI,EAAE,CAAC;AACP,qBAAK,EAAE,EAAE;aACZ,CAAC,CAAC;SACN,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,YAAQ,CAAC,WAAW,EAAE,YAAM;;AAExB,UAAE,CAAC,4CAA4C,EAAE,YAAM;AACnD,mBAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACnB,mBAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpB,mBAAO,CAAC,SAAS,CAAC,0BAAa,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1D,kBAAM,CAAC,OAAO,EAAE,YAAY,EAAE;AAC1B,oBAAI,EAAE,EAAE;AACR,qBAAK,EAAE,EAAE;aACZ,CAAC,CAAC;SACN,CAAC,CAAC;KACN,CAAC,CAAC;CACN,CAAC,CAAC","file":"Weights.spec.js","sourcesContent":["\nimport Unexpected from 'unexpected';\n\nimport Weights from '../Weights';\n\nconst expect = Unexpected.clone();\n\ndescribe('Weights', () => {\n\n    let weights;\n\n    beforeEach(() => {\n        weights = new Weights();\n    });\n\n    it('initialises to 0', () => {\n\n        expect(weights, 'to satisfy', {\n            real: 0,\n            total: 0\n        });\n    });\n\n    describe('add', () => {\n        it('adds a weight to both', () => {\n\n            weights.add(10);\n            expect(weights, 'to satisfy', {\n                real: 10,\n                total: 10\n            });\n        });\n    });\n\n    describe('addReal', () => {\n\n        it('adds a weight to the real weight, not the all weight', () => {\n\n            weights.addReal(10);\n            expect(weights, 'to satisfy', {\n                real: 10,\n                total: 0\n            });\n        });\n    });\n\n    describe('addTotal', () => {\n\n        it('adds a weight to the total weight, not the real weight', () => {\n\n            weights.addTotal(10);\n            expect(weights, 'to satisfy', {\n                real: 0,\n                total: 10\n            });\n        });\n    });\n\n    describe('addWeight', () => {\n\n        it('adds a second weight to the initial weight', () => {\n            weights.addReal(4);\n            weights.addTotal(8);\n            weights.addWeight(new Weights().addReal(16).addTotal(32));\n            expect(weights, 'to satisfy', {\n                real: 20,\n                total: 40\n            });\n        });\n    });\n});"]}
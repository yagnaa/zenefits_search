{"version":3,"sources":["../../src/tests/withErrorLearning.spec.js"],"names":[],"mappings":";;;;0BAAuB,YAAY;;;;AAEnC,IAAM,MAAM,GAAG,wBAAW,KAAK,EAAE,CAAC;;AAGlC,MAAM,CAAC,YAAY,CAAC,gEAAgE,EAAE,UAAU,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE;AACxH,QAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC;eAAM,SAAS,CAAC,OAAO,CAAC;KAAA,EAAE,UAAU,CAAC,EAAE,EACpE,CAAC,CAAC;;AAEH,UAAM,CAAC,SAAS,GAAE,QAAQ,CAAA;AAC1B,UAAM,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;CACxC,CAAC,CAAC;;AAEH,QAAQ,CAAC,WAAW,EAAE,YAAO;;AAEzB,MAAE,CAAC,mBAAmB,EAAE,YAAM;AAC1B,cAAM,CAAC,OAAO,EAAE,2CAA2C,EAAE,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAA;KAC/F,CAAC,CAAC;;AAEH,MAAE,CAAC,uBAAuB,EAAE,YAAM;AAC9B,cAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,CAAA;KACxD,CAAC,CAAA;CACL,CAAC,CAAA","file":"withErrorLearning.spec.js","sourcesContent":["import Unexpected from 'unexpected';\n\nconst expect = Unexpected.clone();\n\n\nexpect.addAssertion('<string> withError synchronously returns a promise <assertion>', function (expect, subject, assertion) {\n    var result = expect.withError(() => assertion(subject), function (e) {\n    });\n\n    expect.errorMode ='bubble'\n    expect(result, 'to be a', 'Promise');\n});\n\ndescribe('withError', () =>  {\n\n    it('returns a promise', () => {\n        expect('hello', 'withError synchronously returns a promise', expect.it('to equal', 'hello'))\n    });\n\n    it('has a promise.resolve', () => {\n        expect(expect.promise.resolve, 'to be a', 'function')\n    })\n})"]}
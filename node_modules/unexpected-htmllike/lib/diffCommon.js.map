{"version":3,"sources":["../src/diffCommon.js"],"names":[],"mappings":"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","file":"diffCommon.js","sourcesContent":["\nimport ObjectAssign from 'object-assign';\nimport convertToDiff from './convertToDiff';\nimport Weights from './Weights';\n\n// Weightings for diff heuristics\n\nexport const DefaultWeights = {\n    OK: 0,                  // Only here as a convenience for tests, WEIGHT_OK is used as the constant\n    NATIVE_NONNATIVE_MISMATCH: 15,\n    NAME_MISMATCH: 10,\n    ATTRIBUTE_MISMATCH: 2,\n    ATTRIBUTE_MISSING: 2,\n    ATTRIBUTE_EXTRA: 1,     // Actual contains an attribute that is not expected\n    STRING_CONTENT_MISMATCH: 3,\n    CONTENT_TYPE_MISMATCH: 1,\n    CHILD_MISSING: 2,\n    CHILD_INSERTED: 2,\n    WRAPPER_REMOVED: 3,\n    ALL_CHILDREN_MISSING: 8  // When the expected has children, and actual has no children\n                             // This + CHILD_MISSING should be equal or greater than NAME_MISMATCH\n                             // to avoid a name-changed child causing the actual rendered child to\n                             // be identified as a wrapper, and the actual child as a missing child\n                             // of the wrapper (see the test\n                             // \"doesn't wrap an element when it means there are missing children\"\n                             // for an example)\n};\n\nexport const defaultOptions = {\n    diffExtraAttributes: true,\n    diffRemovedAttributes: true,\n    diffExtraChildren: true,\n    diffMissingChildren: true,\n    diffWrappers: true,\n    diffExactClasses: true,\n    diffExtraClasses: true,\n    diffMissingClasses: true\n};\n\nexport const WEIGHT_OK = 0;\n\nexport const getOptions = function (options) {\n\n    options = ObjectAssign({}, DiffCommon.defaultOptions, options);\n    options.weights = ObjectAssign({}, DiffCommon.DefaultWeights, options.weights);\n    if (actualAdapter.classAttributeName && actualAdapter.classAttributeName === expectedAdapter.classAttributeName) {\n        options.classAttributeName = actualAdapter.classAttributeName;\n    }\n};\n\nexport const checkElementWrapperResult = function (actualAdapter, actual, currentDiffResult, wrapperResult, options) {\n\n    let diffResult = currentDiffResult;\n    const wrapperWeight = options.diffWrappers ? options.weights.WRAPPER_REMOVED : WEIGHT_OK;\n    if ((wrapperWeight + wrapperResult.weight.real) < diffResult.weight.real) {\n        // It is (better as) a wrapper.\n        diffResult = {\n            diff: convertToDiff(actualAdapter, actual, { includeChildren: false }),\n            weight: wrapperResult.weight.addTotal(options.weights.WRAPPER_REMOVED),\n            target: wrapperResult.target\n        };\n        if (options.diffWrappers) {\n            diffResult.diff.diff = {\n                type: 'wrapper'\n            };\n            diffResult.weight.addReal(options.weights.WRAPPER_REMOVED);\n        } else {\n            diffResult.diff.type = 'WRAPPERELEMENT';\n        }\n\n        diffResult.diff.children = [wrapperResult.diff];\n    }\n\n    return diffResult;\n};\n\nexport const getExpectItContentErrorResult = function (actual, expected, error, options) {\n\n    const diffResult = {\n        type: 'CONTENT',\n        value: actual,\n        diff: {\n            type: 'custom',\n            assertion: expected,\n            error: error\n        }\n    };\n\n    const weights = new Weights();\n    weights.add(options.weights.STRING_CONTENT_MISMATCH);\n    return {\n        diff: diffResult,\n        weight: weights\n    };\n};\n\nexport const getNativeContentResult = function (actual, expected, weights, options) {\n\n    const diffResult = {\n        type: 'CONTENT',\n        value: actual\n    };\n\n    if (actual !== expected) {\n        diffResult.diff = {\n            type: 'changed',\n            expectedValue: expected\n        };\n        if ('' + actual !== '' + expected) {\n            weights.add(options.weights.STRING_CONTENT_MISMATCH);\n        } else {\n            weights.add(options.weights.CONTENT_TYPE_MISMATCH);\n        }\n    }\n\n    return diffResult;\n};\n\nexport const getNativeNonNativeResult = function (actual, expected, weights, expectedAdapter, options) {\n\n    weights.add(options.weights.NATIVE_NONNATIVE_MISMATCH);\n    return {\n        type: 'CONTENT',\n        value: actual,\n        diff: {\n            type: 'contentElementMismatch',\n            expected: convertToDiff(expectedAdapter, expected)\n        }\n    };\n};\n\nexport const getNonNativeNativeResult = function (actual, expected, weights, actualAdapter, expectedAdapter, options) {\n\n    weights.add(options.weights.NATIVE_NONNATIVE_MISMATCH);\n    const diffResult = convertToDiff(actualAdapter, actual);\n    diffResult.diff = {\n        type: 'elementContentMismatch',\n        expected: convertToDiff(expectedAdapter, expected)\n    };\n    return diffResult;\n};\n\nexport const getElementResult = function (actualName, expectedName, weights, options) {\n    const diffResult = {\n        type: 'ELEMENT',\n        name: actualName\n    };\n\n    if (actualName !== expectedName) {\n        diffResult.diff = {\n            type: 'differentElement',\n            expectedName: expectedName\n        };\n        weights.add(options.weights.NAME_MISMATCH);\n    }\n    return diffResult;\n};\n\nexport const diffAttributes = function (actualAttributes, expectedAttributes, expect, options) {\n\n    let diffWeights = new Weights();\n    const diffResult = [];\n    // The promises array collects up promises returned from 'to satisfy' assertions\n    // on attributes. The promiseHandler is then called at the end if there are any promises\n    // in the array. If not, everything was synchronous.\n\n    const promises = [];\n\n    Object.keys(actualAttributes).forEach(attrib => {\n\n        const attribResult = { name: attrib, value: actualAttributes[attrib] };\n        diffResult.push(attribResult);\n\n        if (expectedAttributes.hasOwnProperty(attrib)) {\n            const expectedAttrib = expectedAttributes[attrib];\n\n            if (attrib === options.classAttributeName && !options.diffExactClasses && typeof expectedAttrib === 'string') {\n                getClassDiff(actualAttributes[attrib], expectedAttributes[attrib], attribResult, diffWeights, options);\n                return;\n            }\n\n            let expectResult;\n            let expectError = null;\n            \n            /* Handle a single expect.it() as the attribute value specially.\n             * This improves the output, as it means we don't get the expected 'some attrib value' to satisfy expect.it(....) \n             * before the real output. \n             * \n             * Basically: if this is a single `expect.it()` function, we just want the output from the expect it, \n             * and not leave it to `to satisfy`\n             */\n            if (typeof expectedAttributes[attrib] === 'function' && expectedAttributes[attrib]._expectIt) {\n                try {\n                    expectResult = expectedAttributes[attrib](actualAttributes[attrib]);\n                } catch (e) {\n                    expectError = e;\n                }\n                \n            } else {\n                try {\n                    expect.errorMode = 'bubble';\n                    const attributesAssertion = options.attributesEqual ? 'to equal' : 'to satisfy';\n\n                    expectResult = expect(actualAttributes[attrib], attributesAssertion, expectedAttributes[attrib]);\n\n                } catch (e) {\n                    expectError = e;\n                }\n            }\n\n            if (expectResult && typeof expectResult.isPending === 'function') {\n                if (expectResult.isPending()) {\n                    promises.push(expectResult.then(() => {}, e => {\n                        diffWeights.add(options.weights.ATTRIBUTE_MISMATCH);\n                        attribResult.diff = {\n                            type: 'changed',\n                            expectedValue: expectedAttributes[attrib],\n                            error: e\n                        };\n                    }));\n                } else if (expectResult.isRejected()) {\n                    diffWeights.add(options.weights.ATTRIBUTE_MISMATCH);\n                    attribResult.diff = {\n                        type: 'changed',\n                        expectedValue: expectedAttributes[attrib],\n                        error: expectResult.reason\n                    };\n                }\n            } else if (expectError) {\n                diffWeights.add(options.weights.ATTRIBUTE_MISMATCH);\n                attribResult.diff = {\n                    type: 'changed',\n                    expectedValue: expectedAttributes[attrib],\n                    error: expectError\n                };\n\n            }\n\n\n        } else {\n            if (options.diffExtraAttributes && actualAttributes[attrib] !== undefined) {\n                diffWeights.addReal(options.weights.ATTRIBUTE_EXTRA);\n                attribResult.diff = {\n                    type: 'extra'\n                };\n            }\n\n            diffWeights.addTotal(options.weights.ATTRIBUTE_EXTRA);\n        }\n    });\n\n    let isTarget = false;\n    Object.keys(expectedAttributes).forEach(attrib => {\n\n        if (!actualAttributes.hasOwnProperty(attrib)) {\n            if (attrib === options.findTargetAttrib) {\n                // If it's the findTargetAttrib attribute, but it's not true, we still want to ignore the attribute\n                // This will allow dynamic testing:   e.g. <SomeChild eventTarget={index === 3 ? true : false} />\n                if (expectedAttributes[attrib] === true) {\n                    isTarget = true;\n                }\n            } else {\n                if (options.diffRemovedAttributes) {\n                    diffWeights.addReal(options.weights.ATTRIBUTE_MISSING);\n                    const attribResult = {\n                        name: attrib,\n                        diff: {\n                            type: 'missing',\n                            expectedValue: expectedAttributes[attrib]\n                        }\n                    };\n                    diffResult.push(attribResult);\n                } \n                diffWeights.addTotal(options.weights.ATTRIBUTE_MISSING);\n            }\n        }\n    });\n\n    if (promises.length) {\n        return expect.promise.all(promises).then(() => ({\n            diff: diffResult,\n            weight: diffWeights,\n            isTarget: isTarget\n        }));\n    }\n    \n    return {\n        diff: diffResult,\n        weight: diffWeights,\n        isTarget: isTarget\n    };\n};\n\n\nfunction getClassDiff(actualClasses, expectedClasses, diffResult, weights, options) {\n\n    expectedClasses = (expectedClasses || '')\n        .split(' ')\n        .filter(c => c)\n        .reduce((classes, c) => {\n            classes[c] = true;\n            return classes;\n        }, {});\n\n    actualClasses = (actualClasses || '')\n        .split(' ')\n        .filter(c => c)\n        .reduce((classes, c) => {\n            classes[c] = true;\n            return classes;\n        }, {});\n\n\n    let attributeDiff;\n    if (options.diffMissingClasses) {\n        const missingClasses = Object.keys(expectedClasses).filter(c => !actualClasses[c]);\n        if (missingClasses.length) {\n            attributeDiff = {};\n            attributeDiff.missing = missingClasses.join(' ');\n        }\n    }\n\n    if (options.diffExtraClasses) {\n        const extraClasses = Object.keys(actualClasses).filter(c => !expectedClasses[c]);\n\n        if (extraClasses.length) {\n            attributeDiff = attributeDiff || {};\n            attributeDiff.extra = extraClasses.join(' ');\n        }\n    }\n\n    if (attributeDiff) {\n        attributeDiff.type = 'class';\n        diffResult.diff = attributeDiff;\n        // Not sure what the best to do with the weights is\n        // - we might need to have some different weights for class mismatches\n        // Only real-world examples will help show what needs to be done here\n        weights.add(options.weights.ATTRIBUTE_MISMATCH);\n    }\n}\n\n"]}
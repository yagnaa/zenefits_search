{"version":3,"sources":["../src/syncDiff.js"],"names":[],"mappings":"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","file":"syncDiff.js","sourcesContent":["import ArrayChanges from 'array-changes';\nimport ObjectAssign from 'object-assign';\nimport isNativeType from './isNativeType';\nimport convertToDiff from './convertToDiff';\nimport Weights from './Weights';\nimport * as DiffCommon from './diffCommon';\nimport RequiresAsyncError from './requiresAsyncError';\n\n\nfunction diffElements(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    options = ObjectAssign({}, DiffCommon.defaultOptions, options);\n    options.weights = ObjectAssign({}, DiffCommon.DefaultWeights, options.weights);\n    if (actualAdapter.classAttributeName && actualAdapter.classAttributeName === expectedAdapter.classAttributeName) {\n        options.classAttributeName = actualAdapter.classAttributeName;\n    }\n\n    var diffResult = diffElementOrWrapper(actualAdapter, expectedAdapter, actual, expected, expect, options);\n    return {\n        diff: diffResult.diff,\n        weight: diffResult.weight.real,\n        target: diffResult.target\n    };\n}\n\nfunction diffElementOrWrapper(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    let diffResult = diffElement(actualAdapter, expectedAdapter, actual, expected, expect, options);\n\n    if (diffResult.weight.real !== DiffCommon.WEIGHT_OK && !isNativeType(actual)) {\n\n        const actualChildren = actualAdapter.getChildren(actual);\n\n        if (actualChildren.length === 1) {\n            // Try as wrapper\n            const wrapperResult = diffElementOrWrapper(actualAdapter, expectedAdapter, actualChildren[0], expected, expect, options);\n            return DiffCommon.checkElementWrapperResult(actualAdapter, actual, diffResult, wrapperResult, options);\n        }\n    }\n    return diffResult;\n}\n\n\nfunction diffElement(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    const weights = new Weights();\n    let diffResult = {};\n\n    const actualIsNative = isNativeType(actual);\n    const expectedIsNative = isNativeType(expected);\n\n    if (expectedIsNative && typeof expected === 'function' && expected._expectIt) {\n        let expectItResult;\n        try {\n            expectItResult = expected(actual);\n        } catch (e) {\n            diffResult.type = 'CONTENT';\n            diffResult.value = actual;\n            diffResult.diff = {\n                type: 'custom',\n                assertion: expected,\n                error: e\n            };\n            weights.add(options.weights.STRING_CONTENT_MISMATCH);\n            return {\n                diff: diffResult,\n                weight: weights\n            };\n        }\n\n        if (expectItResult && typeof expectItResult.then === 'function') {\n            expectItResult.then(() => {}, () => {});\n            throw new RequiresAsyncError();\n        }\n\n        diffResult.type = 'CONTENT';\n        diffResult.value = actual;\n\n        return {\n            diff: diffResult,\n            weight: weights\n        };\n    }\n\n    if (actualIsNative && expectedIsNative) {\n\n        diffResult = DiffCommon.getNativeContentResult(actual, expected, weights, options);\n\n        return {\n            diff: diffResult,\n            weight: weights\n        };\n    }\n\n    if (actualIsNative && !expectedIsNative) {\n        diffResult = DiffCommon.getNativeNonNativeResult(actual, expected, weights, expectedAdapter, options);\n\n        return {\n            diff: diffResult,\n            weight: weights\n        };\n    }\n\n    if (!actualIsNative && expectedIsNative) {\n        diffResult = DiffCommon.getNonNativeNativeResult(actual, expected, weights, actualAdapter, expectedAdapter, options);\n\n        return {\n            diff: diffResult,\n            weight: weights\n        };\n    }\n\n    const actualName = actualAdapter.getName(actual);\n    const expectedName = expectedAdapter.getName(expected);\n\n    diffResult = DiffCommon.getElementResult(actualName, expectedName, weights, options);\n\n    const attributesResult = DiffCommon.diffAttributes(actualAdapter.getAttributes(actual), expectedAdapter.getAttributes(expected), expect, options);\n    if (typeof attributesResult.then === 'function') {\n        // Promise returned, we need to do this async\n        throw new RequiresAsyncError();\n    }\n\n    let target;\n\n    if (attributesResult.isTarget) {\n        target = actual;\n    }\n    diffResult.attributes = attributesResult.diff;\n    weights.addWeight(attributesResult.weight);\n\n    const contentResult = diffContent(actualAdapter, expectedAdapter, actualAdapter.getChildren(actual), expectedAdapter.getChildren(expected), expect, options);\n\n    diffResult.children = contentResult.diff;\n    weights.addWeight(contentResult.weight);\n    target = target || contentResult.target;\n\n    return {\n        diff: diffResult,\n        weight: weights,\n        target: target\n    };\n\n}\n\n\nfunction diffContent(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    let bestWeight = null;\n    let bestDiff = null;\n    let bestTarget;\n\n    // Optimize the common case of being exactly one child, ie. an element wrapping something\n    // Removed for now, to make this function slightly easier to convert to promises!\n    //if (actual.length === 1 && expected.length === 1) {\n    //    // It's a single element, then just directly compare the elements\n    //    previousStepPromise = diffElement(actualAdapter, expectedAdapter, actual[0], expected[0], expect, options)\n    //    .then(singleElementDiff => {\n    //        bestDiff = [singleElementDiff.diff];\n    //        bestWeight = singleElementDiff.weight;\n    //    });\n    //}\n\n    const childrenResult = diffChildren(actualAdapter, expectedAdapter, actual, expected, expect, options);\n\n    if (!bestWeight || childrenResult.weight.real < bestWeight.real) {\n        bestDiff = childrenResult.diff;\n        bestWeight = childrenResult.weight;\n        bestTarget = childrenResult.target;\n    }\n\n\n    let wrapperResult;\n    if ((!bestWeight || bestWeight.real !== DiffCommon.WEIGHT_OK) &&\n        actual.length === 1 &&\n        expected.length !== 0 && !isNativeType(actual[0])) {\n        // Try it as a wrapper, and see if it's better\n        // Also covered here is a wrapper around several children\n\n        const actualChildren = actualAdapter.getChildren(actual[0]);\n        wrapperResult = diffContent(actualAdapter, expectedAdapter, actualChildren, expected, expect, options);\n    }\n\n    if (wrapperResult) {\n        const wrapperWeight = options.diffWrappers ? options.weights.WRAPPER_REMOVED : DiffCommon.WEIGHT_OK;\n\n        if (!bestWeight || (wrapperWeight + wrapperResult.weight.real) < bestWeight.real) {\n            // It could be a wrapper\n            bestWeight = wrapperResult.weight;\n            bestWeight.addTotal(options.weights.WRAPPER_REMOVED);\n            const actualDiff = convertToDiff(actualAdapter, actual[0], { includeChildren: false });\n            actualDiff.children = wrapperResult.diff;\n            if (options.diffWrappers) {\n                actualDiff.diff = {\n                    type: 'wrapper'\n                };\n                bestWeight.addReal(options.weights.WRAPPER_REMOVED);\n            } else {\n                actualDiff.type = 'WRAPPERELEMENT';\n            }\n            bestDiff = [actualDiff];\n        }\n    }\n    return {\n        diff: bestDiff,\n        weight: bestWeight,\n        target: bestTarget\n    };\n}\n\n\n\nfunction diffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options) {\n\n\n    let onlyExact = true;\n    let bestDiffResult = null;\n\n\n    const exactDiffResult = tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExact);\n\n    bestDiffResult = exactDiffResult;\n\n    // If it wasn't a perfect match, and there were both inserts and removals, we can try allowing the children that\n    // don't match to be \"similar\".\n    let changesDiffResult;\n    if (exactDiffResult.weight.real !== 0 && exactDiffResult.insertCount && exactDiffResult.removeCount) {\n        onlyExact = false;\n        changesDiffResult = tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExact);\n    }\n\n\n    if (changesDiffResult && changesDiffResult.weight.real < bestDiffResult.weight.real) {\n        bestDiffResult = changesDiffResult;\n    }\n    return bestDiffResult;\n}\n\n\nfunction tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExactMatches) {\n\n    let diffWeights = new Weights();\n    const diffResult = [];\n\n    let insertCount = 0;\n    let removeCount = 0;\n    let changeCount = 0;\n\n    const actualChildrenLength = actualChildren.length;\n    const expectedChildrenLength = expectedChildren.length;\n\n    const cachedDiffs = [];\n    cachedDiffs.length = actualChildrenLength * expectedChildrenLength;\n\n\n    const changes = ArrayChanges(actualChildren, expectedChildren,\n        function (a, b, aIndex, bIndex) {\n            const cacheIndex = (aIndex * expectedChildrenLength) + bIndex;\n            let elementDiff = cachedDiffs[cacheIndex];\n            if (!elementDiff) {\n                elementDiff = diffElementOrWrapper(actualAdapter, expectedAdapter, a, b, expect, options);\n                cachedDiffs[cacheIndex] = elementDiff;\n            }\n            return (cachedDiffs[cacheIndex].weight.real === DiffCommon.WEIGHT_OK);\n        },\n\n        function (a, b, aIndex, bIndex) {\n\n            if (onlyExactMatches) {\n                const cacheIndex = (aIndex * expectedChildrenLength) + bIndex;\n                let elementDiff = cachedDiffs[cacheIndex];\n                if (!elementDiff) {\n                    elementDiff = diffElementOrWrapper(actualAdapter, expectedAdapter, a, b, expect, options);\n                    cachedDiffs[cacheIndex] = elementDiff;\n                }\n                return elementDiff.weight.real === DiffCommon.WEIGHT_OK;\n            }\n            var aIsNativeType = isNativeType(a);\n            var bIsNativeType = isNativeType(b);\n\n            // If they're native types, assume they're similar\n            if (aIsNativeType && bIsNativeType) {\n                return true;\n            }\n\n            // If one is an element, then don't count them as \"similar\"\n            if (aIsNativeType !== bIsNativeType) {\n                return false;\n            }\n\n            // Here we could diff and get a weight, but the weight as to what is similar is dependant on\n            // what the other \"similar\" elements got, so we'll just take a simplistic view -\n            // elements with the same name are similar, otherwise they're not\n            return actualAdapter.getName(a) === expectedAdapter.getName(b);\n        });\n\n\n    let target = undefined;\n    changes.forEach(diffItem => {\n\n        let itemResult, cachedDiff;\n        if (typeof diffItem.actualIndex === 'number' && typeof diffItem.expectedIndex === 'number') {\n            const cacheIndex = (diffItem.actualIndex * expectedChildrenLength) + diffItem.expectedIndex;\n            cachedDiff = cachedDiffs[cacheIndex];\n            if (cachedDiff && cachedDiff.target) {\n                target = cachedDiff.target;\n            }\n        }\n\n        switch (diffItem.type) {\n            case 'insert':\n                insertCount++;\n                let actualIndex = null;\n                if (typeof diffItem.actualIndex === 'number') {\n                    itemResult = convertToDiff(actualAdapter, diffItem.value);\n                    actualIndex = diffItem.actualIndex;\n                } else {\n                    itemResult = convertToDiff(expectedAdapter, diffItem.value);\n                }\n                if (options.diffMissingChildren) {\n                    diffWeights.add(options.weights.CHILD_MISSING);\n                    itemResult.diff = {\n                        type: 'missing'\n                    };\n                    if (actualIndex !== null) {\n                        itemResult.diff.actualIndex = actualIndex;\n                    }\n                    diffResult.push(itemResult);\n                }\n                break;\n\n            case 'remove':\n                removeCount++;\n                itemResult = convertToDiff(actualAdapter, diffItem.value);\n\n                if (options.diffExtraChildren) {\n                    itemResult.diff = {\n                        type: 'extra'\n                    };\n                    diffWeights.addReal(options.weights.CHILD_INSERTED);\n                }\n                diffWeights.addTotal(options.weights.CHILD_INSERTED);\n                diffResult.push(itemResult);\n                break;\n\n            case 'similar':\n                changeCount++;\n            // fallthrough\n\n            case 'equal': //eslint-disable-line no-fallthrough\n            default:\n                diffResult.push(cachedDiff.diff);\n                diffWeights.addWeight(cachedDiff.weight);\n                break;\n        }\n    });\n\n\n    if (actualChildren.length === 0 && expectedChildren.length !== 0 && options.diffMissingChildren) {\n        diffWeights.add(options.weights.ALL_CHILDREN_MISSING);\n    }\n\n    return {\n        weight: diffWeights,\n        diff: diffResult,\n        target,\n        insertCount,\n        removeCount,\n        changeCount\n    };\n}\n\nexport default {\n    diffElements\n};\n"]}
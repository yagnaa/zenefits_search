{"version":3,"sources":["../src/asyncContains.js"],"names":[],"mappings":"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","file":"asyncContains.js","sourcesContent":["\nimport AsyncDiff from './asyncDiff';\nimport { DefaultWeights } from './diffCommon';\nimport isNativeType from './isNativeType';\n\nfunction contains(actualAdapter, expectedAdapter, actual, expected, equal, options) {\n\n    return containsContent(actualAdapter, expectedAdapter, actual, expected, equal, options)\n        .then(result => {\n\n            // If result has WRAPPERELEMENTs around it, remove them\n            stripWrapperElements(actualAdapter, result);\n            return result;\n        });\n}\n\nfunction stripWrapperElements(actualAdapter, containsResult) {\n\n    if (containsResult.bestMatch && containsResult.bestMatch.diff.type === 'WRAPPERELEMENT') {\n        // Unwrap the diff and the item\n        containsResult.bestMatch.diff = containsResult.bestMatch.diff.children[0];\n        containsResult.bestMatchItem = actualAdapter.getChildren(containsResult.bestMatchItem)[0];\n        return stripWrapperElements(actualAdapter, containsResult);\n    }\n    return containsResult;\n}\n\n\nfunction containsContent(actualAdapter, expectedAdapter, actual, expected, equal, options) {\n\n    let result = {\n        found: false,\n        bestMatch: null,\n        bestMatchItem: null\n    };\n\n    return AsyncDiff.diffElements(actualAdapter, expectedAdapter, actual, expected, equal, options)\n        .then(diffResult => {\n\n        if (diffResult.weight === DefaultWeights.OK) {\n            result.found = true;\n            result.bestMatch = diffResult;\n            result.bestMatchItem = actual;\n            return result;\n        }\n        result.bestMatch = diffResult;\n        result.bestMatchItem = actual;\n\n        if (!isNativeType(actual)) {\n            const children = actualAdapter.getChildren(actual);\n            if (children) {\n\n                const childrenLength = children.length;\n\n                const checkChild = function (childIndex) {\n\n                    return containsContent(actualAdapter, expectedAdapter, children[childIndex], expected, equal, options)\n                        .then(childResult => {\n\n                        if (childResult.found) {\n                            return {\n                                found: true,\n                                bestMatch: childResult.bestMatch,\n                                bestMatchItem: childResult.bestMatchItem\n                            };\n                        }\n\n                        if (!result.bestMatch || childResult.bestMatch.weight < result.bestMatch.weight) {\n                            result.bestMatch = childResult.bestMatch;\n                            result.bestMatchItem = childResult.bestMatchItem;\n                        }\n\n                        if (childIndex < childrenLength) {\n\n                            return checkChild(childIndex + 1);\n                        }\n\n                        return result;\n                    });\n                };\n\n\n                return checkChild(0);\n            }\n        }\n\n        return result;\n    });\n\n}\n\nexport default contains;"]}
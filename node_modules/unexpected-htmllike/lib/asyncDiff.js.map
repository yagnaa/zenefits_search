{"version":3,"sources":["../src/asyncDiff.js"],"names":[],"mappings":";;;;;;;;;;iCAA8B,qBAAqB;;;;4BAC1B,eAAe;;;;4BACf,gBAAgB;;;;6BACf,iBAAiB;;;;2BACnB,eAAe;;;;uBACnB,WAAW;;;;0BACH,cAAc;;IAA9B,UAAU;;AAGtB,SAAS,YAAY,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE;;AAErF,WAAO,GAAG,+BAAa,EAAE,EAAE,UAAU,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AAC/D,WAAO,CAAC,OAAO,GAAG,+BAAa,EAAE,EAAE,UAAU,CAAC,cAAc,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/E,QAAI,aAAa,CAAC,kBAAkB,IAAI,aAAa,CAAC,kBAAkB,KAAK,eAAe,CAAC,kBAAkB,EAAE;AAC7G,eAAO,CAAC,kBAAkB,GAAG,aAAa,CAAC,kBAAkB,CAAC;KACjE;;AAED,WAAO,oBAAoB,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CACzF,IAAI,CAAC,UAAA,UAAU,EAAI;AAChB,eAAO;AACH,gBAAI,EAAE,UAAU,CAAC,IAAI;AACrB,kBAAM,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI;AAC9B,kBAAM,EAAE,UAAU,CAAC,MAAM;SAC5B,CAAC;KACL,CAAC,CAAC;CACV;;AAED,SAAS,oBAAoB,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE;;AAE7F,QAAM,aAAa,GAAG,WAAW,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;;AAErG,WAAO,aAAa,CACf,IAAI,CAAC,UAAA,UAAU,EAAI;;AAEhB,YAAI,UAAU,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,SAAS,IAAI,CAAC,+BAAa,MAAM,CAAC,EAAE;;AAE1E,gBAAM,cAAc,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;;AAEzD,gBAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;;AAE7B,uBAAO,oBAAoB,CAAC,aAAa,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CACpG,IAAI,CAAC,UAAA,aAAa,EAAI;AACnB,2BAAO,UAAU,CAAC,yBAAyB,CAAC,aAAa,EAAE,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;iBAC1G,CAAC,CAAC;aACV;SACJ;AACD,eAAO,UAAU,CAAC;KACrB,CAAC,CAAC;CACV;;AAGD,SAAS,WAAW,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE;;AAEpF,QAAM,OAAO,GAAG,0BAAa,CAAC;AAC9B,QAAI,UAAU,GAAG,EAAE,CAAC;;AAEpB,QAAM,cAAc,GAAG,+BAAa,MAAM,CAAC,CAAC;AAC5C,QAAM,gBAAgB,GAAG,+BAAa,QAAQ,CAAC,CAAC;;AAEhD,QAAM,QAAQ,GAAG,EAAE,CAAC;;AAEpB,QAAI,gBAAgB,IAAI,OAAO,QAAQ,KAAK,UAAU,IAAI,QAAQ,CAAC,SAAS,EAAE;AAC1E,YAAM,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC;mBAAM,QAAQ,CAAC,MAAM,CAAC;SAAA,EAAE,UAAA,CAAC,EAAI;;AAElE,gBAAM,WAAW,GAAG,UAAU,CAAC,6BAA6B,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;AAC3F,sBAAU,GAAG,WAAW,CAAC,IAAI,CAAC;AAC9B,mBAAO,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACtC,mBAAO,UAAU,CAAC;SACrB,CAAC,CAAC,IAAI,CAAC,YAAM;;AAEV,sBAAU,CAAC,IAAI,GAAG,SAAS,CAAC;AAC5B,sBAAU,CAAC,KAAK,GAAG,MAAM,CAAC;;AAE1B,mBAAO;AACH,oBAAI,EAAE,UAAU;AAChB,sBAAM,EAAE,OAAO;aAClB,CAAC;SACL,CAAC,CAAC;;AAEH,YAAI,eAAe,EAAE;AACjB,mBAAO,eAAe,CAAC;SAC1B;;AAED,eAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,UAAU,EAAV,UAAU,EAAE,OAAO,EAAP,OAAO,EAAE,CAAC,CAAC;KAE1D;;;;AAID,QAAI,cAAc,IAAI,gBAAgB,EAAE;;AAEpC,kBAAU,GAAG,UAAU,CAAC,sBAAsB,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;;AAEnF,eAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;AAC1B,gBAAI,EAAE,UAAU;AAChB,kBAAM,EAAE,OAAO;SAClB,CAAC,CAAC;KACN;;AAED,QAAI,cAAc,IAAI,CAAC,gBAAgB,EAAE;;AAErC,kBAAU,GAAG,UAAU,CAAC,wBAAwB,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;;AAEtG,eAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;AAC1B,gBAAI,EAAE,UAAU;AAChB,kBAAM,EAAE,OAAO;SAClB,CAAC,CAAC;KACN;;AAED,QAAI,CAAC,cAAc,IAAI,gBAAgB,EAAE;AACrC,kBAAU,GAAG,UAAU,CAAC,wBAAwB,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;;AAErH,eAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;AAC1B,gBAAI,EAAE,UAAU;AAChB,kBAAM,EAAE,OAAO;SAClB,CAAC,CAAC;KACN;;AAED,QAAM,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACjD,QAAM,YAAY,GAAG,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAGvD,cAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;;AAErF,QAAI,MAAM,YAAA,CAAC;AACX,QAAM,uBAAuB,GAAG,cAAc,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,eAAe,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CACxI,IAAI,CAAC,UAAA,YAAY,EAAI;AAClB,kBAAU,CAAC,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC;AAC1C,eAAO,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AACvC,YAAI,YAAY,CAAC,QAAQ,EAAE;AACvB,kBAAM,GAAG,MAAM,CAAC;SACnB;KACJ,CAAC,CAAC;;AAEP,YAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;;AAGvC,QAAM,oBAAoB,GAAG,WAAW,CAAC,aAAa,EAAE,eAAe,EAAE,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CAC9J,IAAI,CAAC,UAAA,aAAa,EAAI;;AAEnB,kBAAU,CAAC,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC;AACzC,eAAO,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AACxC,YAAI,aAAa,CAAC,MAAM,EAAE;AACtB,kBAAM,GAAG,aAAa,CAAC,MAAM,CAAC;SACjC;KACJ,CAAC,CAAC;;AAEP,YAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;;AAGpC,WAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAM;;AAE3C,eAAO;AACH,gBAAI,EAAE,UAAU;AAChB,kBAAM,EAAE,OAAO;AACf,kBAAM,EAAN,MAAM;SACT,CAAC;KACL,CAAC,CAAC;CAGN;;AAED,SAAS,cAAc,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,MAAM,EAAE,OAAO,EAAE;;AAE3E,QAAM,MAAM,GAAG,UAAU,CAAC,cAAc,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAChG,QAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;AACnC,eAAO,MAAM,CAAC;KACjB;AACD,WAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;CACzC;;AAKD,SAAS,WAAW,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE;;AAEpF,QAAI,UAAU,GAAG,IAAI,CAAC;AACtB,QAAI,QAAQ,GAAG,IAAI,CAAC;AACpB,QAAI,UAAU,YAAA,CAAC;;;;;;;;;;;;;AAaf,WAAO,YAAY,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,cAAc,EAAI;;AAE1G,YAAI,CAAC,UAAU,IAAI,cAAc,CAAC,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE;AAC7D,oBAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;AAC/B,sBAAU,GAAG,cAAc,CAAC,MAAM,CAAC;AACnC,sBAAU,GAAG,cAAc,CAAC,MAAM,CAAC;SACtC;KACJ,CAAC,CAAC,IAAI,CAAC,YAAM;;AAGV,YAAI,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,IAAI,KAAK,UAAU,CAAC,SAAS,CAAA,IACxD,MAAM,CAAC,MAAM,KAAK,CAAC,IACnB,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,+BAAa,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;;;;AAInD,gBAAM,cAAc,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,mBAAO,WAAW,CAAC,aAAa,EAAE,eAAe,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SACjG;;AAED,eAAO,IAAI,CAAC;KAEf,CAAC,CAAC,IAAI,CAAC,UAAA,aAAa,EAAI;;AAErB,YAAI,aAAa,EAAE;AACf,gBAAM,aAAa,GAAG,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,GAAG,UAAU,CAAC,SAAS,CAAC;;AAEpG,gBAAI,CAAC,UAAU,IAAI,AAAC,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,GAAI,UAAU,CAAC,IAAI,EAAE;;AAE9E,0BAAU,GAAG,aAAa,CAAC,MAAM,CAAC;AAClC,0BAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;AACrD,oBAAM,UAAU,GAAG,gCAAc,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC;AACvF,0BAAU,CAAC,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC;AACzC,oBAAI,OAAO,CAAC,YAAY,EAAE;AACtB,8BAAU,CAAC,IAAI,GAAG;AACd,4BAAI,EAAE,SAAS;qBAClB,CAAC;AACF,8BAAU,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;iBACvD,MAAM;AACH,8BAAU,CAAC,IAAI,GAAG,gBAAgB,CAAC;iBACtC;AACD,wBAAQ,GAAG,CAAC,UAAU,CAAC,CAAC;aAC3B;SACJ;KACJ,CAAC,CAAC,IAAI,CAAC,YAAM;AACV,eAAO;AACH,gBAAI,EAAE,QAAQ;AACd,kBAAM,EAAE,UAAU;AAClB,kBAAM,EAAE,UAAU;SACrB,CAAC;KACL,CAAC,CAAC;CAEN;;AAID,SAAS,YAAY,CAAC,aAAa,EAAE,eAAe,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,EAAE,OAAO,EAAE;;AAGrG,QAAI,SAAS,GAAG,IAAI,CAAC;AACrB,QAAI,cAAc,GAAG,IAAI,CAAC;;AAG1B,WAAO,eAAe,CAAC,aAAa,EAAE,eAAe,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAC/G,IAAI,CAAC,UAAA,eAAe,EAAI;;AAErB,sBAAc,GAAG,eAAe,CAAC;;;;AAIjC,YAAI,eAAe,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,eAAe,CAAC,WAAW,IAAI,eAAe,CAAC,WAAW,EAAE;AACjG,qBAAS,GAAG,KAAK,CAAC;AAClB,mBAAO,eAAe,CAAC,aAAa,EAAE,eAAe,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;SACxH;AACD,eAAO,IAAI,CAAC;KAEf,CAAC,CACD,IAAI,CAAC,UAAA,iBAAiB,EAAI;;AAEvB,YAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,CAAC,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,IAAI,EAAE;AACjF,0BAAc,GAAG,iBAAiB,CAAC;SACtC;AACD,eAAO,cAAc,CAAC;KACzB,CAAC,CAAC;CACV;;AAED,SAAS,eAAe,CAAC,aAAa,EAAE,eAAe,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE;;AAE1H,QAAI,WAAW,GAAG,0BAAa,CAAC;AAChC,QAAM,UAAU,GAAG,EAAE,CAAC;;AAEtB,QAAI,WAAW,GAAG,CAAC,CAAC;AACpB,QAAI,WAAW,GAAG,CAAC,CAAC;AACpB,QAAI,WAAW,GAAG,CAAC,CAAC;AACpB,QAAM,QAAQ,GAAG,EAAE,CAAC;;AAEpB,WAAO,MAAM,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,YAAM,oBAAoB,GAAG,cAAc,CAAC,MAAM,CAAC;AACnD,YAAM,sBAAsB,GAAG,gBAAgB,CAAC,MAAM,CAAC;;AAEvD,YAAM,WAAW,GAAG,EAAE,CAAC;AACvB,mBAAW,CAAC,MAAM,GAAG,oBAAoB,GAAG,sBAAsB,CAAC;;AAEnE,4CAAkB,cAAc,EAAE,gBAAgB,EAC9C,UAAU,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE;;AAEtC,gBAAM,UAAU,GAAG,AAAC,MAAM,GAAG,sBAAsB,GAAI,MAAM,CAAC;AAC9D,gBAAI,WAAW,CAAC,UAAU,CAAC,EAAE;AACzB,uBAAO,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,SAAS,CAAC,CAAC;aACjF;;AAED,gCAAoB,CAAC,aAAa,EAAE,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,WAAW,EAAI;AAC5F,2BAAW,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC;AACtC,uBAAO,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,SAAS,CAAC,CAAC;aACrE,CAAC,CAAC;SACN,EAED,UAAU,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE;;AAEtC,gBAAI,gBAAgB,EAAE;;AAClB,wBAAM,UAAU,GAAG,AAAC,MAAM,GAAG,sBAAsB,GAAI,MAAM,CAAC;AAC9D,wBAAM,IAAI,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;AACrC,wBAAI,IAAI,EAAE;AACN;+BAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,SAAS,CAAC;0BAAC;qBAC9D;;AAED;2BAAO,oBAAoB,CAAC,aAAa,EAAE,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,WAAW,EAAI;AACnG,uCAAW,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC;AACtC,oCAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,SAAS,CAAC,CAAC;yBAC9D,CAAC;sBAAC;;;;aACN;AACD,gBAAI,aAAa,GAAG,+BAAa,CAAC,CAAC,CAAC;AACpC,gBAAI,aAAa,GAAG,+BAAa,CAAC,CAAC,CAAC;;;AAGpC,gBAAI,aAAa,IAAI,aAAa,EAAE;AAChC,uBAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;aACzB;;;AAGD,gBAAI,aAAa,KAAK,aAAa,EAAE;AACjC,uBAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC1B;;;;;AAKD,mBAAO,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5E,EAAE,UAAU,OAAO,EAAE;;AAElB,gBAAI,MAAM,YAAA,CAAC;AACX,mBAAO,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAI;;AAExB,oBAAI,UAAU,YAAA,CAAC;AACf,oBAAI,UAAU,YAAA,CAAC;AACf,oBAAI,OAAO,QAAQ,CAAC,WAAW,KAAK,QAAQ,KAAK,OAAO,QAAQ,CAAC,aAAa,KAAK,QAAQ,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,CAAA,AAAC,EAAE;AACvH,wBAAM,UAAU,GAAG,AAAC,QAAQ,CAAC,WAAW,GAAG,sBAAsB,GAAI,QAAQ,CAAC,aAAa,CAAC;AAC5F,wBAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;AAC3C,wBAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;AACjC,8BAAM,GAAG,UAAU,CAAC,MAAM,CAAC;qBAC9B;iBACJ;;AAED,wBAAO,QAAQ,CAAC,IAAI;AAChB,yBAAK,QAAQ;AACT,mCAAW,EAAE,CAAC;AACd,4BAAI,WAAW,GAAG,IAAI,CAAC;AACvB,4BAAI,OAAO,QAAQ,CAAC,WAAW,KAAK,QAAQ,EAAE;AAC1C,sCAAU,GAAG,gCAAc,aAAa,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,uCAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;yBACtC,MAAM;AACH,sCAAU,GAAG,gCAAc,eAAe,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;yBAC/D;;AAED,4BAAI,OAAO,CAAC,mBAAmB,EAAE;AAC7B,uCAAW,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AAC/C,sCAAU,CAAC,IAAI,GAAG;AACd,oCAAI,EAAE,SAAS;6BAClB,CAAC;AACF,gCAAI,WAAW,KAAK,IAAI,EAAE;AACtB,0CAAU,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;6BAC7C;AACD,sCAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;yBAC/B;AACD,8BAAM;;AAAA,AAEV,yBAAK,QAAQ;AACT,mCAAW,EAAE,CAAC;AACd,kCAAU,GAAG,gCAAc,aAAa,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAE1D,4BAAI,OAAO,CAAC,iBAAiB,EAAE;AAC3B,sCAAU,CAAC,IAAI,GAAG;AACd,oCAAI,EAAE,OAAO;6BAChB,CAAC;AACF,uCAAW,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;yBACvD;AACD,mCAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AACrD,kCAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC5B,8BAAM;;AAAA,AAEV,yBAAK,SAAS;AACV,mCAAW,EAAE,CAAC;AAAA;;;;AAKlB,yBAAK,OAAO,CAAC;AACb;AACI,4BAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC;;AAEhC,kCAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACpB,4BAAM,OAAO,GAAG,oBAAoB,CAAC,aAAa,EAAE,eAAe,EAAE,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CACnH,IAAI,CAAC,UAAA,MAAM,EAAI;AACZ,sCAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;AAChC,uCAAW,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;yBACxC,CAAC,CAAC;AACP,gCAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACvB,8BAAM;AAAA,iBACb;aAEJ,CAAC,CAAC;;AAEH,gBAAI,QAAQ,CAAC,MAAM,EAAE;AACjB,uBAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAM;AAC3C,2BAAO,CAAC,MAAM,CAAC,CAAC;iBACnB,CAAC,CAAC;aACN;AACD,mBAAO,OAAO,CAAC,MAAM,CAAC,CAAC;SAC1B,CAAC,CAAC;KAEV,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;;AAEd,YAAI,cAAc,CAAC,MAAM,KAAK,CAAC,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,mBAAmB,EAAE;AAC7F,uBAAW,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;SACzD;;AAED,eAAO;AACH,kBAAM,EAAE,WAAW;AACnB,gBAAI,EAAE,UAAU;AAChB,uBAAW,EAAX,WAAW;AACX,uBAAW,EAAX,WAAW;AACX,uBAAW,EAAX,WAAW;AACX,kBAAM,EAAN,MAAM;SACT,CAAC;KACL,CAAC,CAAC;CACN;;qBAEc;AACX,gBAAY,EAAZ,YAAY;CACf","file":"asyncDiff.js","sourcesContent":["import ArrayChangesAsync from 'array-changes-async';\nimport ObjectAssign from 'object-assign';\nimport isNativeType from './isNativeType';\nimport convertToDiff from './convertToDiff';\nimport LineBreaker from './lineBreaker';\nimport Weights from './Weights';\nimport * as DiffCommon from './diffCommon';\n\n\nfunction diffElements(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    options = ObjectAssign({}, DiffCommon.defaultOptions, options);\n    options.weights = ObjectAssign({}, DiffCommon.DefaultWeights, options.weights);\n    if (actualAdapter.classAttributeName && actualAdapter.classAttributeName === expectedAdapter.classAttributeName) {\n        options.classAttributeName = actualAdapter.classAttributeName;\n    }\n\n    return diffElementOrWrapper(actualAdapter, expectedAdapter, actual, expected, expect, options)\n        .then(diffResult => {\n            return {\n                diff: diffResult.diff,\n                weight: diffResult.weight.real,\n                target: diffResult.target\n            };\n        });\n}\n\nfunction diffElementOrWrapper(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    const elementResult = diffElement(actualAdapter, expectedAdapter, actual, expected, expect, options);\n\n    return elementResult\n        .then(diffResult => {\n\n            if (diffResult.weight.real !== DiffCommon.WEIGHT_OK && !isNativeType(actual)) {\n\n                const actualChildren = actualAdapter.getChildren(actual);\n\n                if (actualChildren.length === 1) {\n                    // Try as wrapper\n                    return diffElementOrWrapper(actualAdapter, expectedAdapter, actualChildren[0], expected, expect, options)\n                        .then(wrapperResult => {\n                            return DiffCommon.checkElementWrapperResult(actualAdapter, actual, diffResult, wrapperResult, options);\n                        });\n                }\n            }\n            return diffResult;\n        });\n}\n\n\nfunction diffElement(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    const weights = new Weights();\n    let diffResult = {};\n\n    const actualIsNative = isNativeType(actual);\n    const expectedIsNative = isNativeType(expected);\n\n    const promises = [];\n\n    if (expectedIsNative && typeof expected === 'function' && expected._expectIt) {\n        const withErrorResult = expect.withError(() => expected(actual), e => {\n\n            const errorResult = DiffCommon.getExpectItContentErrorResult(actual, expected, e, options);\n            diffResult = errorResult.diff;\n            weights.addWeight(errorResult.weight);\n            return diffResult;\n        }).then(() => {\n\n            diffResult.type = 'CONTENT';\n            diffResult.value = actual;\n            // Assertion passed\n            return {\n                diff: diffResult,\n                weight: weights\n            };\n        });\n\n        if (withErrorResult) {\n            return withErrorResult;\n        }\n\n        return expect.promise.resolve({ diffResult, weights });\n\n    }\n\n    // TODO: All the following checks can be lumped together, just need to return the lot\n    // as a prommise for async, and directly for sync\n    if (actualIsNative && expectedIsNative) {\n\n        diffResult = DiffCommon.getNativeContentResult(actual, expected, weights, options);\n\n        return expect.promise.resolve({\n            diff: diffResult,\n            weight: weights\n        });\n    }\n\n    if (actualIsNative && !expectedIsNative) {\n\n        diffResult = DiffCommon.getNativeNonNativeResult(actual, expected, weights, expectedAdapter, options);\n\n        return expect.promise.resolve({\n            diff: diffResult,\n            weight: weights\n        });\n    }\n\n    if (!actualIsNative && expectedIsNative) {\n        diffResult = DiffCommon.getNonNativeNativeResult(actual, expected, weights, actualAdapter, expectedAdapter, options);\n\n        return expect.promise.resolve({\n            diff: diffResult,\n            weight: weights\n        });\n    }\n\n    const actualName = actualAdapter.getName(actual);\n    const expectedName = expectedAdapter.getName(expected);\n\n\n    diffResult = DiffCommon.getElementResult(actualName, expectedName, weights, options);\n\n    let target;\n    const attributesResultPromise = diffAttributes(actualAdapter.getAttributes(actual), expectedAdapter.getAttributes(expected), expect, options)\n        .then(attribResult => {\n            diffResult.attributes = attribResult.diff;\n            weights.addWeight(attribResult.weight);\n            if (attribResult.isTarget) {\n                target = actual;\n            }\n        });\n\n    promises.push(attributesResultPromise);\n\n\n    const contentResultPromise = diffContent(actualAdapter, expectedAdapter, actualAdapter.getChildren(actual), expectedAdapter.getChildren(expected), expect, options)\n        .then(contentResult => {\n\n            diffResult.children = contentResult.diff;\n            weights.addWeight(contentResult.weight);\n            if (contentResult.target) {\n                target = contentResult.target;\n            }\n        });\n\n    promises.push(contentResultPromise);\n\n\n    return expect.promise.all(promises).then(() => {\n\n        return {\n            diff: diffResult,\n            weight: weights,\n            target\n        };\n    });\n\n\n}\n\nfunction diffAttributes(actualAttributes, expectedAttributes, expect, options) {\n\n    const result = DiffCommon.diffAttributes(actualAttributes, expectedAttributes, expect, options);\n    if (typeof result.then === 'function') {\n        return result;\n    }\n    return expect.promise.resolve(result);\n}\n\n\n\n\nfunction diffContent(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    let bestWeight = null;\n    let bestDiff = null;\n    let bestTarget;\n\n    // Optimize the common case of being exactly one child, ie. an element wrapping something\n    // Removed for now, to make this function slightly easier to convert to promises!\n    //if (actual.length === 1 && expected.length === 1) {\n    //    // It's a single element, then just directly compare the elements\n    //    previousStepPromise = diffElement(actualAdapter, expectedAdapter, actual[0], expected[0], expect, options)\n    //    .then(singleElementDiff => {\n    //        bestDiff = [singleElementDiff.diff];\n    //        bestWeight = singleElementDiff.weight;\n    //    });\n    //}\n\n    return diffChildren(actualAdapter, expectedAdapter, actual, expected, expect, options).then(childrenResult => {\n\n        if (!bestWeight || childrenResult.weight.real < bestWeight.real) {\n            bestDiff = childrenResult.diff;\n            bestWeight = childrenResult.weight;\n            bestTarget = childrenResult.target;\n        }\n    }).then(() => {\n\n\n        if ((!bestWeight || bestWeight.real !== DiffCommon.WEIGHT_OK) &&\n            actual.length === 1 &&\n            expected.length !== 0 && !isNativeType(actual[0])) {\n            // Try it as a wrapper, and see if it's better\n            // Also covered here is a wrapper around several children\n\n            const actualChildren = actualAdapter.getChildren(actual[0]);\n            return diffContent(actualAdapter, expectedAdapter, actualChildren, expected, expect, options);\n        }\n\n        return null;\n\n    }).then(wrapperResult => {\n\n        if (wrapperResult) {\n            const wrapperWeight = options.diffWrappers ? options.weights.WRAPPER_REMOVED : DiffCommon.WEIGHT_OK;\n\n            if (!bestWeight || (wrapperWeight + wrapperResult.weight.real) < bestWeight.real) {\n                // It could be a wrapper\n                bestWeight = wrapperResult.weight;\n                bestWeight.addTotal(options.weights.WRAPPER_REMOVED);\n                const actualDiff = convertToDiff(actualAdapter, actual[0], { includeChildren: false });\n                actualDiff.children = wrapperResult.diff;\n                if (options.diffWrappers) {\n                    actualDiff.diff = {\n                        type: 'wrapper'\n                    };\n                    bestWeight.addReal(options.weights.WRAPPER_REMOVED);\n                } else {\n                    actualDiff.type = 'WRAPPERELEMENT';\n                }\n                bestDiff = [actualDiff];\n            }\n        }\n    }).then(() => {\n        return {\n            diff: bestDiff,\n            weight: bestWeight,\n            target: bestTarget\n        };\n    });\n\n}\n\n\n\nfunction diffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options) {\n\n\n    let onlyExact = true;\n    let bestDiffResult = null;\n\n\n    return tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExact)\n        .then(exactDiffResult => {\n\n            bestDiffResult = exactDiffResult;\n\n            // If it wasn't a perfect match, and there were both inserts and removals, we can try allowing the children that\n            // don't match to be \"similar\".\n            if (exactDiffResult.weight.real !== 0 && exactDiffResult.insertCount && exactDiffResult.removeCount) {\n                onlyExact = false;\n                return tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExact);\n            }\n            return null;\n\n        })\n        .then(changesDiffResult => {\n\n            if (changesDiffResult && changesDiffResult.weight.real < bestDiffResult.weight.real) {\n                bestDiffResult = changesDiffResult;\n            }\n            return bestDiffResult;\n        });\n}\n\nfunction tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExactMatches) {\n\n    let diffWeights = new Weights();\n    const diffResult = [];\n\n    let insertCount = 0;\n    let removeCount = 0;\n    let changeCount = 0;\n    const promises = [];\n\n    return expect.promise((resolve, reject) => {\n        const actualChildrenLength = actualChildren.length;\n        const expectedChildrenLength = expectedChildren.length;\n\n        const cachedDiffs = [];\n        cachedDiffs.length = actualChildrenLength * expectedChildrenLength;\n\n        ArrayChangesAsync(actualChildren, expectedChildren,\n            function (a, b, aIndex, bIndex, callback) {\n\n                const cacheIndex = (aIndex * expectedChildrenLength) + bIndex;\n                if (cachedDiffs[cacheIndex]) {\n                    return callback(cachedDiffs[cacheIndex].weight.real === DiffCommon.WEIGHT_OK);\n                }\n\n                diffElementOrWrapper(actualAdapter, expectedAdapter, a, b, expect, options).then(elementDiff => {\n                    cachedDiffs[cacheIndex] = elementDiff;\n                    return callback(elementDiff.weight.real === DiffCommon.WEIGHT_OK);\n                });\n            },\n\n            function (a, b, aIndex, bIndex, callback) {\n\n                if (onlyExactMatches) {\n                    const cacheIndex = (aIndex * expectedChildrenLength) + bIndex;\n                    const diff = cachedDiffs[cacheIndex];\n                    if (diff) {\n                        return callback(diff.weight.real === DiffCommon.WEIGHT_OK);\n                    }\n\n                    return diffElementOrWrapper(actualAdapter, expectedAdapter, a, b, expect, options).then(elementDiff => {\n                        cachedDiffs[cacheIndex] = elementDiff;\n                        callback(elementDiff.weight.real === DiffCommon.WEIGHT_OK);\n                    });\n                }\n                var aIsNativeType = isNativeType(a);\n                var bIsNativeType = isNativeType(b);\n\n                // If they're native types, assume they're similar\n                if (aIsNativeType && bIsNativeType) {\n                    return callback(true);\n                }\n\n                // If one is an element, then don't count them as \"similar\"\n                if (aIsNativeType !== bIsNativeType) {\n                    return callback(false);\n                }\n\n                // Here we could diff and get a weight, but the weight as to what is similar is dependant on\n                // what the other \"similar\" elements got, so we'll just take a simplistic view -\n                // elements with the same name are similar, otherwise they're not\n                return callback(actualAdapter.getName(a) === expectedAdapter.getName(b));\n            }, function (changes) {\n\n                let target;\n                changes.forEach(diffItem => {\n\n                    let itemResult;\n                    let testCached;\n                    if (typeof diffItem.actualIndex === 'number' && (typeof diffItem.expectedIndex === 'number' || diffItem.type === 'equal')) {\n                        const cacheIndex = (diffItem.actualIndex * expectedChildrenLength) + diffItem.expectedIndex;\n                        const cachedDiff = cachedDiffs[cacheIndex];\n                        if (cachedDiff && cachedDiff.target) {\n                            target = cachedDiff.target;\n                        }\n                    }\n\n                    switch(diffItem.type) {\n                        case 'insert':\n                            insertCount++;\n                            let actualIndex = null;\n                            if (typeof diffItem.actualIndex === 'number') {\n                                itemResult = convertToDiff(actualAdapter, diffItem.value);\n                                actualIndex = diffItem.actualIndex;\n                            } else {\n                                itemResult = convertToDiff(expectedAdapter, diffItem.value);\n                            }\n\n                            if (options.diffMissingChildren) {\n                                diffWeights.add(options.weights.CHILD_MISSING);\n                                itemResult.diff = {\n                                    type: 'missing'\n                                };\n                                if (actualIndex !== null) {\n                                    itemResult.diff.actualIndex = actualIndex;\n                                }\n                                diffResult.push(itemResult);\n                            }\n                            break;\n\n                        case 'remove':\n                            removeCount++;\n                            itemResult = convertToDiff(actualAdapter, diffItem.value);\n\n                            if (options.diffExtraChildren) {\n                                itemResult.diff = {\n                                    type: 'extra'\n                                };\n                                diffWeights.addReal(options.weights.CHILD_INSERTED);\n                            }\n                            diffWeights.addTotal(options.weights.CHILD_INSERTED);\n                            diffResult.push(itemResult);\n                            break;\n\n                        case 'similar':\n                            changeCount++;\n                        // fallthrough\n                        // (equal needs to be diffed, because it may contain wrappers, hence we need to work that out.. again)\n                        // It would be good to cache that, from the diff above.\n\n                        case 'equal': //eslint-disable-line no-fallthrough\n                        default:\n                            const index = diffResult.length;\n\n                            diffResult.push({}); // Push a placeholder, we'll replace when the promise resolves\n                            const promise = diffElementOrWrapper(actualAdapter, expectedAdapter, diffItem.value, diffItem.expected, expect, options)\n                                .then(result => {\n                                    diffResult[index] = result.diff;\n                                    diffWeights.addWeight(result.weight);\n                                });\n                            promises.push(promise);\n                            break;\n                    }\n\n                });\n\n                if (promises.length) {\n                    return expect.promise.all(promises).then(() => {\n                        resolve(target);\n                    });\n                }\n                return resolve(target);\n            });\n\n    }).then(target => {\n\n        if (actualChildren.length === 0 && expectedChildren.length !== 0 && options.diffMissingChildren) {\n            diffWeights.add(options.weights.ALL_CHILDREN_MISSING);\n        }\n\n        return {\n            weight: diffWeights,\n            diff: diffResult,\n            insertCount,\n            removeCount,\n            changeCount,\n            target\n        };\n    });\n}\n\nexport default {\n    diffElements\n};\n"]}
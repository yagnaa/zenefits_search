'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function isRawType(value) {
    var type = typeof value;
    return type === 'string' || type === 'number' || type === 'boolean' || type === 'undefined' || value === null;
}

var DefaultOptions = {
    concatTextContent: false
};

function convertValueTypeToString(value) {

    if (typeof value === 'string') {
        // Common case can be fasttracked
        return value;
    }

    if (value === null || value === undefined) {
        return '';
    }

    return '' + value;
}

function concatenateStringChildren(accum, value) {
    if (isRawType(value) && accum.length && isRawType(accum[accum.length - 1])) {
        accum[accum.length - 1] = convertValueTypeToString(accum[accum.length - 1]) + convertValueTypeToString(value);
        return accum;
    }
    accum.push(value);
    return accum;
}

function flatten(value) {
    if (!Array.isArray(value)) {
        return [value];
    }

    return value.reduce(function (result, item) {
        return result.concat(flatten(item));
    }, []);
}

var ReactTestRendererAdapter = (function () {
    function ReactTestRendererAdapter(options) {
        _classCallCheck(this, ReactTestRendererAdapter);

        this._options = (0, _objectAssign2['default'])({}, DefaultOptions, options);
    }

    _createClass(ReactTestRendererAdapter, [{
        key: 'getName',
        value: function getName(element) {
            if (typeof element.type === 'string') {
                return element.type;
            }

            return 'no-display-name';
        }
    }, {
        key: 'getAttributes',
        value: function getAttributes(element) {

            return element.props;
        }
    }, {
        key: 'getChildren',
        value: function getChildren(element) {

            var children = element.children || [];
            if (this._options.convertToString || this._options.convertMultipleRawToStrings && children.length > 1) {
                children = children.map(function (child) {
                    return isRawType(child) ? convertValueTypeToString(child) : child;
                });
            }

            if (this._options.concatTextContent) {
                return children.reduce(concatenateStringChildren, []);
            }
            return children;
        }
    }, {
        key: 'setOptions',
        value: function setOptions(newOptions) {

            this._options = (0, _objectAssign2['default'])({}, this._options, newOptions);
        }
    }, {
        key: 'getOptions',
        value: function getOptions() {
            return this._options;
        }
    }]);

    return ReactTestRendererAdapter;
})();

ReactTestRendererAdapter.prototype.classAttributeName = 'className';

exports['default'] = ReactTestRendererAdapter;
module.exports = exports['default'];
//# sourceMappingURL=ReactTestRendererAdapter.js.map
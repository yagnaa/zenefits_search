{"version":3,"sources":["../src/RawAdapter.js"],"names":[],"mappings":";;;;;;;;;;;;4BAAyB,eAAe;;;;AAExC,IAAM,iBAAiB,GAAG,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAC;;AAE3D,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;AACvC,YAAQ,EAAE;AACR,kBAAU,EAAE,KAAK;AACjB,gBAAQ,EAAE,KAAK;AACf,aAAK,EAAE,iBAAiB;KACzB;CACF,CAAC,CAAC;;AAEH,SAAS,SAAS,CAAC,KAAK,EAAE;AACtB,QAAI,IAAI,GAAG,OAAO,KAAK,CAAC;AACxB,WAAO,IAAI,KAAK,QAAQ,IACpB,IAAI,KAAK,QAAQ,IACjB,IAAI,KAAK,SAAS,IAClB,IAAI,KAAK,WAAW,IACpB,KAAK,KAAK,IAAI,CAAC;CACtB;;AAED,IAAM,cAAc,GAAG;AACnB,qBAAiB,EAAE,KAAK;CAC3B,CAAC;;AAEF,SAAS,wBAAwB,CAAC,KAAK,EAAE;;AAErC,QAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;;AAC3B,eAAO,KAAK,CAAC;KAChB;;AAED,QAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AACvC,eAAO,EAAE,CAAC;KACb;;AAED,WAAO,EAAE,GAAG,KAAK,CAAC;CACrB;;AAED,SAAS,yBAAyB,CAAC,KAAK,EAAE,KAAK,EAAE;AAC7C,QAAI,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAChC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EACtC;AACI,aAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,wBAAwB,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,wBAAwB,CAAC,KAAK,CAAC,CAAC;AAC9G,eAAO,KAAK,CAAC;KAChB;AACD,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClB,WAAO,KAAK,CAAC;CAChB;;AAED,SAAS,OAAO,CAAC,KAAK,EAAE;AACpB,QAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACvB,eAAO,CAAC,KAAK,CAAC,CAAC;KAClB;;AAED,WAAO,KAAK,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,IAAI;eAAK,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAAA,EAAE,EAAE,CAAC,CAAA;CAC1E;;IAEK,UAAU;AAED,aAFT,UAAU,CAEA,OAAO,EAAE;8BAFnB,UAAU;;AAGR,YAAI,CAAC,QAAQ,GAAG,+BAAa,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;KAC7D;;iBAJC,UAAU;;eAML,iBAAC,OAAO,EAAE;AACb,gBAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;AAClC,uBAAO,OAAO,CAAC,IAAI,CAAC;aACvB;;AAED,mBAAO,iBAAiB,CAAC;SAC5B;;;eAEY,uBAAC,OAAO,EAAE;;AAEnB,mBAAO,OAAO,CAAC,KAAK,CAAC;SACxB;;;eAEU,qBAAC,OAAO,EAAE;;AAEjB,gBAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;AACtC,oBAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,KAAK;uBAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;aAAA,CAAC,CAAC;AAC3E,gBAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,IAC7B,IAAI,CAAC,QAAQ,CAAC,2BAA2B,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;AAClE,wBAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAA,KAAK;2BAAI,SAAS,CAAC,KAAK,CAAC,GAAG,wBAAwB,CAAC,KAAK,CAAC,GAAG,KAAK;iBAAA,CAAC,CAAC;aAChG;;AAED,gBAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE;AACjC,uBAAO,QAAQ,CAAC,MAAM,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC;aACzD;AACD,mBAAO,QAAQ,CAAC;SACnB;;;eAES,oBAAC,UAAU,EAAE;;AAEnB,gBAAI,CAAC,QAAQ,GAAG,+BAAa,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC/D;;;eAES,sBAAG;AACT,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;eAEQ,mBAAC,OAAO,EAAE,OAAO,EAAE;;;AACxB,gBAAI,SAAS,CAAC,OAAO,CAAC,EAAE;AACpB,uBAAO,OAAO,CAAC;aAClB;;AAED,gBAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC7C,sBAAU,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAC3C,sBAAU,CAAC,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAClD,iBAAK,IAAI,IAAI,IAAI,UAAU,CAAC,KAAK,EAAE;AACjC,oBAAI,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,UAAU,EAAE;AAChD,8BAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,0BAA0B,GAAG,IAAI,CAAC;iBAC1D;aACF;AACD,sBAAU,CAAC,QAAQ,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,CAAA,CAAE,GAAG,CAAC,UAAA,KAAK;uBAAI,MAAK,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC;aAAA,CAAC,CAAC;AACxG,mBAAO,UAAU,CAAC;SACrB;;;eAEW,sBAAC,KAAK,EAAE;AAChB,mBAAQ,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IACxC,KAAK,CAAC,QAAQ,KAAK,iBAAiB,CAAE;SAC3C;;;eAEU,qBAAC,KAAK,EAAE;;;AAGf,mBAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACtC;;;WArEC,UAAU;;;AAyEhB,UAAU,CAAC,SAAS,CAAC,kBAAkB,GAAG,WAAW,CAAC;;qBAEvC,UAAU","file":"RawAdapter.js","sourcesContent":["import ObjectAssign from 'object-assign';\n\nconst TYPEOF_IDENTIFIER = { $$typeof: 'raw json adapter' };\n\nconst baseObject = Object.create(Object, {\n  $$typeof: {\n    enumerable: false,\n    writable: false,\n    value: TYPEOF_IDENTIFIER\n  }\n});\n\nfunction isRawType(value) {\n    var type = typeof value;\n    return type === 'string' ||\n        type === 'number' ||\n        type === 'boolean' ||\n        type === 'undefined' ||\n        value === null;\n}\n\nconst DefaultOptions = {\n    concatTextContent: false\n};\n\nfunction convertValueTypeToString(value) {\n\n    if (typeof value === 'string') { // Common case can be fasttracked\n        return value;\n    }\n\n    if (value === null || value === undefined) {\n        return '';\n    }\n\n    return '' + value;\n}\n\nfunction concatenateStringChildren(accum, value) {\n    if (isRawType(value) && accum.length &&\n        isRawType(accum[accum.length - 1]))\n    {\n        accum[accum.length - 1] = convertValueTypeToString(accum[accum.length - 1]) + convertValueTypeToString(value);\n        return accum;\n    }\n    accum.push(value);\n    return accum;\n}\n\nfunction flatten(value) {\n    if (!Array.isArray(value)) {\n        return [value];\n    }\n\n    return value.reduce((result, item) => result.concat(flatten(item)), [])\n}\n\nclass RawAdapter {\n\n    constructor(options) {\n        this._options = ObjectAssign({}, DefaultOptions, options);\n    }\n\n    getName(element) {\n        if (typeof element.type === 'string') {\n            return element.type;\n        }\n\n        return 'no-display-name';\n    }\n\n    getAttributes(element) {\n\n        return element.props;\n    }\n\n    getChildren(element) {\n\n        let children = element.children || [];\n        children = children.filter(child => child !== null && child !== undefined);\n        if (this._options.convertToString || \n            this._options.convertMultipleRawToStrings && children.length > 1) {\n            children = children.map(child => isRawType(child) ? convertValueTypeToString(child) : child);\n        }\n\n        if (this._options.concatTextContent) {\n            return children.reduce(concatenateStringChildren, []);\n        }\n        return children;\n    }\n\n    setOptions(newOptions) {\n\n        this._options = ObjectAssign({}, this._options, newOptions);\n    }\n\n    getOptions() {\n        return this._options;\n    }\n    \n    serialize(adapter, element) {\n        if (isRawType(element)) {\n            return element;\n        }\n        \n        const serialized = Object.create(baseObject);\n        serialized.type = adapter.getName(element);\n        serialized.props = adapter.getAttributes(element);\n        for (let prop in serialized.props) {\n          if (typeof serialized.props[prop] === 'function') {\n            serialized.props[prop]._isRawDeserializedFunction = true;\n          }\n        }\n        serialized.children = (adapter.getChildren(element) || []).map(child => this.serialize(adapter, child));\n        return serialized;\n    }\n    \n    isRawElement(value) {\n        return (value && typeof value === 'object' &&\n          value.$$typeof === TYPEOF_IDENTIFIER);\n    }\n    \n    deserialize(value) {\n        // Actually, this method just converts a raw JSON-ish value to objects with the correct $$typeof property,\n        // So it's exactly the same as just serializing using this adapter\n        return this.serialize(this, value);\n    }\n}\n\n\nRawAdapter.prototype.classAttributeName = 'className';\n\nexport default RawAdapter;\n"]}
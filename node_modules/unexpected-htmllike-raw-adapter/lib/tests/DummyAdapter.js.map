{"version":3,"sources":["../../src/tests/DummyAdapter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAMM,YAAY;WAAZ,YAAY;0BAAZ,YAAY;;;eAAZ,YAAY;;WAET,iBAAC,OAAO,EAAE;;AAEf,aAAO,OAAO,CAAC,MAAM,CAAC;KACvB;;;WAEY,uBAAC,OAAO,EAAE;;AAErB,aAAO,OAAO,CAAC,OAAO,CAAC;KACxB;;;WAEU,qBAAC,OAAO,EAAE;;AAEnB,aAAO,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;KACjC;;;;;;;;WAMQ,mBAAC,OAAO,EAAE;;;AACjB,UAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC/B,eAAO;AACL,gBAAM,EAAE,OAAO,CAAC,IAAI;AACpB,iBAAO,EAAE,OAAO,CAAC,KAAK;AACtB,oBAAU,EAAE,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAA,CAAE,GAAG,CAAC,UAAA,KAAK;mBAAI,MAAK,SAAS,CAAC,KAAK,CAAC;WAAA,CAAC;SACzE,CAAA;OACF;;AAED,aAAO,OAAO,CAAC;KAChB;;;SA/BG,YAAY;;;qBAmCH,YAAY","file":"DummyAdapter.js","sourcesContent":["/**\n * This is a dummy adapter for testing the `convertFromOther` method\n * The structure is identical to the raw format, except all properties are prefixed with `X_`\n * Calling makeDummy(element) returns a dummy-fied tree, including dummyfying the children\n */\n\nclass DummyAdapter {\n  \n  getName(element) {\n\n    return element.X_type;\n  }\n  \n  getAttributes(element) {\n    \n    return element.X_props;\n  }\n  \n  getChildren(element) {\n    \n    return element.X_children || [];\n  }\n  \n  /**\n   * Takes a raw format element, and turns it and all it's children into dummy elements (with the X_ prefix)\n   * @param element\n   */\n  makeDummy(element) {\n    if (typeof element === 'object') {\n      return {\n        X_type: element.type,\n        X_props: element.props,\n        X_children: (element.children || []).map(child => this.makeDummy(child))\n      }\n    }\n    // All other types are just native, and are not modified\n    return element;\n  }\n  \n}\n\nexport default DummyAdapter;\n\n"]}
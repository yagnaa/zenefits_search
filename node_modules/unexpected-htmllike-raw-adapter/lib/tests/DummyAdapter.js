/**
 * This is a dummy adapter for testing the `convertFromOther` method
 * The structure is identical to the raw format, except all properties are prefixed with `X_`
 * Calling makeDummy(element) returns a dummy-fied tree, including dummyfying the children
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var DummyAdapter = (function () {
  function DummyAdapter() {
    _classCallCheck(this, DummyAdapter);
  }

  _createClass(DummyAdapter, [{
    key: 'getName',
    value: function getName(element) {

      return element.X_type;
    }
  }, {
    key: 'getAttributes',
    value: function getAttributes(element) {

      return element.X_props;
    }
  }, {
    key: 'getChildren',
    value: function getChildren(element) {

      return element.X_children || [];
    }

    /**
     * Takes a raw format element, and turns it and all it's children into dummy elements (with the X_ prefix)
     * @param element
     */
  }, {
    key: 'makeDummy',
    value: function makeDummy(element) {
      var _this = this;

      if (typeof element === 'object') {
        return {
          X_type: element.type,
          X_props: element.props,
          X_children: (element.children || []).map(function (child) {
            return _this.makeDummy(child);
          })
        };
      }
      // All other types are just native, and are not modified
      return element;
    }
  }]);

  return DummyAdapter;
})();

exports['default'] = DummyAdapter;
module.exports = exports['default'];
//# sourceMappingURL=DummyAdapter.js.map
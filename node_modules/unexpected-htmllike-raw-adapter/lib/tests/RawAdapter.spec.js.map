{"version":3,"sources":["../../src/tests/RawAdapter.spec.js"],"names":[],"mappings":"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","file":"RawAdapter.spec.js","sourcesContent":["\nimport React from 'react';\nimport Unexpected from 'unexpected';\n\nimport RawAdapter from '../';\nimport DummyAdapter from './DummyAdapter';\n\nconst expect = Unexpected.clone();\n\n\ndescribe('RawAdapter', () => {\n\n    let adapter;\n\n    beforeEach(() => {\n        adapter = new RawAdapter();\n    });\n\n    describe('getName()', () => {\n\n        it('gets the name of a native component', () => {\n\n            const tree = { type: 'span', attributes: {} };\n            expect(adapter.getName(tree), 'to equal', 'span');\n        });\n\n    });\n\n    describe('getAttributes()', () => {\n\n        it('gets standard string attributes', () => {\n\n            const tree = { type: 'span', props: { test1: 'foo', test2: 'bar' } };\n            expect(adapter.getAttributes(tree), 'to equal', {\n                test1: 'foo',\n                test2: 'bar'\n            });\n        });\n\n        it('gets numeric attributes', () => {\n\n            const tree = { type: 'span', props: { test1: 42, test2: 305.12 } };\n            expect(adapter.getAttributes(tree), 'to equal', {\n                test1: 42,\n                test2: 305.12\n            });\n        });\n\n        it('gets object attributes', () => {\n\n            const tree = { type: 'span', props: { test1: { test: 'foo', num: 42 } } };\n            expect(adapter.getAttributes(tree), 'to equal', {\n                test1: { test: 'foo', num: 42 }\n            });\n        });\n    });\n\n    describe('setOptions()', () => {\n\n        it('sets an option', () => {\n\n            adapter.setOptions({ someOption: true });\n            expect(adapter.getOptions(), 'to satisfy', { someOption: true });\n        });\n    });\n\n    describe('getChildren()', () => {\n\n        it('gets an empty array when there are no children', () => {\n\n            const tree = { type: 'span', props: {} };\n            expect(adapter.getChildren(tree), 'to equal', []);\n        });\n\n        it('gets an array with one string child', () => {\n\n            const tree = { type: 'span', props: {}, children: [ 'foo' ] };\n            expect(adapter.getChildren(tree), 'to equal', [ 'foo' ]);\n        });\n\n        it('gets an array with one numeric child', () => {\n\n            const tree = { type: 'span', props: {}, children: [ 42 ] };\n            expect(adapter.getChildren(tree), 'to equal', [ 42 ]);\n        });\n\n        it('gets an array with a component child', () => {\n\n            const tree = {\n            type: 'span',\n                props: {},\n                children: [\n                    {\n                        type: 'div',\n                        props: {},\n                        children: ['some text']\n                    }\n                  ]\n            };\n            expect(adapter.getChildren(tree), 'to equal', [ { type: 'div', props: {}, children: [ 'some text' ] } ]);\n        });\n\n        it('gets an array with several component children', () => {\n\n            const tree = {\n                type: 'span',\n                props: {},\n                children: [\n                    {\n                        type: 'div',\n                        props: {},\n                        children: [ 'some text' ]\n                    },\n                    {\n                        type: 'div',\n                        props: {},\n                        children: [ 'foo' ]\n                    },\n                    {\n                        type: 'span',\n                        props: {\n                            attrib: 'hello world'\n                        },\n                        children: [ 'cheese' ]\n                    }\n                ]\n            };\n\n            expect(adapter.getChildren(tree), 'to equal', [\n                { type: 'div', props: {}, children: ['some text'] },\n                { type: 'div', props: {}, children: ['foo'] },\n                { type: 'span', props: { attrib: 'hello world' }, children: [ 'cheese' ] }\n            ]);\n        });\n\n        it('does not concat text children by default', () => {\n\n            const tree = {\n                type: 'span',\n                props: {},\n                children: [ 'Hello ', 42, ' world' ]\n            };\n\n            expect(adapter.getChildren(tree), 'to equal', [\n                'Hello ', 42, ' world'\n            ]);\n        });\n\n        it('does concat text children when concatTextContent is true', () => {\n\n            const tree = {\n                type: 'span',\n                props: {},\n                children: [ 'Hello ', 42, ' world' ]\n            };\n            adapter.setOptions({ concatTextContent: true })\n\n            expect(adapter.getChildren(tree), 'to equal', [\n                'Hello 42 world'\n            ]);\n        });\n\n        it('converts content to strings when `convertToString` option is true', () => {\n\n            const tree = {\n                type: 'span',\n                props: {},\n                children: [ 'Hello ', 42, ' world' ]\n            };\n            adapter.setOptions({ convertToString: true });\n\n            expect(adapter.getChildren(tree), 'to equal', [\n                'Hello ', '42', ' world'\n            ]);\n        });\n\n        it('converts content with null when `convertToString` option is true', () => {\n\n            const tree = {\n                type: 'span',\n                props: {},\n                children: [ 'Hello ', null, ' world' ]\n            };\n            adapter.setOptions({ convertToString: true });\n\n            expect(adapter.getChildren(tree), 'to equal', [\n                'Hello ', ' world'\n            ]);\n        });\n\n        it('converts only raw content to strings', () => {\n\n            const tree = {\n                type: 'div',\n                props: {},\n                children: [\n                    {\n                        type: 'span',\n                        props: {},\n                        children: [ 'Hello world ', 21 ]\n                    },\n                    {\n                        type: 'span',\n                        props: {},\n                        children: [ 42 ]\n                    }\n                ]\n            };\n            adapter.setOptions({ convertToString: true });\n\n            expect(adapter.getChildren(tree), 'to equal', [\n                { type: 'span', props: {}, children: ['Hello world ', 21] },\n                { type: 'span', props: {}, children: [ 42 ] }\n            ]);\n        });\n\n        it('converts multiple raw content to strings using `convertMultipleRawToStrings:true`', () => {\n\n            const tree = { type: 'span', props: {}, children: ['Hello world ', 21] };\n            adapter.setOptions({ convertMultipleRawToStrings: true });\n\n            expect(adapter.getChildren(tree), 'to equal', [\n                'Hello world ', '21'\n            ]);\n        });\n\n        it('leaves single raw content alone with `convertMultipleRawToStrings:true`', () => {\n\n            const tree = { type: 'span', props: {}, children: [ 21 ] };\n            adapter.setOptions({ convertMultipleRawToStrings: true });\n\n            expect(adapter.getChildren(tree), 'to equal', [\n                21\n            ]);\n        });\n\n        it('leaves content when there is only one item, after ignoring `null`s', () => {\n\n            const tree = { type: 'span', props: {}, children: [ null, 21 ] };\n            adapter.setOptions({ convertMultipleRawToStrings: true });\n\n            expect(adapter.getChildren(tree), 'to equal', [ 21 ]);\n        });\n\n        it('does not ignore boolean elements', () => {\n            // I'm not sure what is \"right\" in this case\n            // If we've produced it, we should allow it here, otherwise the readers and writers mismatch\n            // On the other hand, booleans are ignored by react, so what business does it have here?\n            const tree = {\n                type: 'span',\n                props: {},\n                children: [ true ]\n            };\n            expect(adapter.getChildren(tree), 'to equal', [ true ]);\n        });\n    });\n    \n    it('returns a className prop as a className', () => {\n\n        const tree = {\n            type: 'span',\n            props: { className: 'abc' }\n        };\n        expect(adapter.getAttributes(tree), 'to equal', { className: 'abc' });\n    });\n\n    it('returns the correct classAttributeName', () => {\n\n        expect(adapter.classAttributeName, 'to equal', 'className');\n    });\n    \n    describe('serialize', function () {\n        \n        let dummyAdapter;\n        beforeEach(function () {\n            dummyAdapter = new DummyAdapter();\n        })\n        \n        it('converts a single node', function () { \n            const original = { type: 'span', props: { className: 'foo' } };\n            const dummyElement = dummyAdapter.makeDummy(original);\n            expect(adapter.serialize(dummyAdapter, dummyElement), 'to satisfy', original);\n        });\n        \n        it('converts a node with child nodes', function () {\n            const original = { \n                type: 'span', \n                props: { className: 'foo' },\n                children: [ { type: 'div', props: { id: 'bar' } }]\n            };\n            const dummyElement = dummyAdapter.makeDummy(original);\n            expect(adapter.serialize(dummyAdapter, dummyElement), 'to satisfy', original);\n        });\n\n        it('converts a node with mixed content child nodes', function () {\n            const original = {\n                type: 'span',\n                props: { className: 'foo' },\n                children: [ { type: 'div', props: { id: 'bar' } }, 'hello', 42, { type: 'span', props: {}, children: ['baz' ] } ]\n            };\n            const dummyElement = dummyAdapter.makeDummy(original);\n            expect(adapter.serialize(dummyAdapter, dummyElement), 'to satisfy', original);\n        });\n    });\n    \n    describe('isRawElement', function () {\n        \n        let dummyAdapter;\n        beforeEach(function () {\n            dummyAdapter = new DummyAdapter();\n        });\n        \n        it('returns true from something from a convertFromOther', function () {\n            const original = { type: 'span', props: { className: 'foo' } };\n            const dummyElement = dummyAdapter.makeDummy(original);\n            const converted = adapter.serialize(dummyAdapter, dummyElement);\n            expect(adapter.isRawElement(converted), 'to be true');\n        });\n        \n        it('returns false on an object with type,props and children', function () {\n            const original = { type: 'span', props: { className: 'foo' }, children: [] };\n            expect(adapter.isRawElement(original), 'to be false');\n        });\n        \n        it('returns true on a deserialized object with type,props and children', function () {\n            const original = { type: 'span', props: { className: 'foo' }, children: [] };\n            expect(adapter.isRawElement(adapter.deserialize(original)), 'to be true');\n        });\n    });\n    \n    describe('function prop deserialization', function () {\n       \n        it('deserializers a function to include the _isRawDeserializedFunction property', function () {\n           \n            const original = { type: 'span', props: { onClick: function doSomething() { } } };\n            const deserialized = adapter.deserialize(original);\n            expect(deserialized.props.onClick, 'to have properties', { _isRawDeserializedFunction: true });\n        });\n    });\n});\n"]}